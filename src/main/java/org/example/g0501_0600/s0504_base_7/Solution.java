package org.example.g0501_0600.s0504_base_7;

// #Easy #Math #Recursion

/**
 * 504. Base 7
 *
 * Дано целое число num (которое может быть отрицательным).
 * Необходимо преобразовать его в строковое представление
 * в семеричной системе счисления (основание 7) без использования
 * встроенных функций для преобразования систем
 * счисления (таких как Integer.toString(int i, int radix) в Java).
 *
 * Решение - не самое быстрое - 2 ms
 * алгоритм повторного деления с сохранением остатков.
 * Этот метод работает за время O(log₇(n)), что является оптимальным
 * для данной проблемы.
 *
 */
class Solution {
    public String convertToBase7(int num) {
        // Сразу обрабатываем частный случай с нулем
        if (num == 0) {
            return "0";
        }

        // Определяем, является ли исходное число отрицательным
        boolean isNegative = num < 0;
        // Работаем с абсолютным значением числа, чтобы упростить логику
        int absoluteValue = Math.abs(num);

        // Используем StringBuilder для эффективной конкатенации строк
        StringBuilder resultBuilder = new StringBuilder();

        // Продолжаем процесс, пока наше число не станет нулем
        while (absoluteValue > 0) {
            // Находим остаток от деления на 7 - это наша следующая цифра
            int remainder = absoluteValue % 7;
            // Добавляем найденную цифру в строитель строки
            resultBuilder.append(remainder);
            // Обновляем число, деля его нацело на 7
            absoluteValue = absoluteValue / 7;
        }

        // Цифры в строителе находятся в обратном порядке, поэтому разворачиваем их
        String resultForPositiveNumber = resultBuilder.reverse().toString();

        // Если исходное число было отрицательным, добавляем знак минуса
        if (isNegative) {
            return "-" + resultForPositiveNumber;
        }
        // Иначе возвращаем результат как есть
        return resultForPositiveNumber;
    }
}
/*
Подход:

Обработать крайний случай: если num равен 0, сразу вернуть строку "0".
Учесть знак числа. Создать флаг isNegative, запомнить,
что исходное число отрицательное, и работать с его абсолютным
значением (Math.abs(num)).

Повторять цикл, пока абсолютное значение числа больше 0:
Разделить число на 7.

Остаток от этого деления станет следующей цифрой в
результате (начиная с конца).

Обновить число, присвоив ему результат целочисленного деления.

Так как остатки мы получаем в обратном порядке,
собранную строку нужно развернуть.

Если исходное число было отрицательным,
добавить знак '-' в начало результирующей строки.
 */
