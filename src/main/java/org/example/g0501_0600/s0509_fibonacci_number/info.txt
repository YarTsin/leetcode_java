Подходы к решению
1. Рекурсивное решение (наивное)
Прямолинейная реализация рекурсии по определению.

2. Динамическое программирование (с мемоизацией)
Хранение уже вычисленных значений для избежания повторных вычислений.

3. Итеративное решение (оптимальное)
Вычисление чисел Фибоначчи последовательно в цикле.

4. Матричное возведение в степень (продвинутое)
Использование матриц для достижения O(log n) времени.

==============

Временная сложность
O(n) - выполняем n-2 итерации цикла (для n > 1), каждая итерация выполняется за O(1).

Пространственная сложность
O(1) - используем только константное количество переменных, независимо от n.

==============

Дополнительные вопросы для собеседования
1. Как изменить решение для последовательности Трибоначчи (каждое число - сумма трех предыдущих)?
Добавить еще одну переменную prev3 и обновлять все три значения в цикле

2. Как обработать очень большие n (например, n=10^6)?
Использовать матричное возведение в степень для O(log n) времени
Или итеративный подход с BigInteger для избежания переполнения

3.Как найти только последнюю цифру n-го числа Фибоначчи?
Можно использовать итеративный подход с сохранением только последней цифры на каждом шаге (%10)

4.Как найти n-е число Фибоначчи по модулю m?
Аналогично, применять операцию модуля на каждом шаге вычислений

===============

Математические свойства
Числа Фибоначчи имеют множество интересных свойств:
Отношение F(n+1)/F(n) стремится к золотому сечению (≈1.618)
Имеют приложения в алгоритмах, финансах, биологии
Существует формула Бине для прямого вычисления,
но она использует вещественные числа и может быть неточной
