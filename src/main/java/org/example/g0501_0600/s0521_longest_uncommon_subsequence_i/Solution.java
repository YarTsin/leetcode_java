package org.example.g0501_0600.s0521_longest_uncommon_subsequence_i;

// #Easy #String

/**
 * 521. Longest Uncommon Subsequence
 *
 * todo запутанное условие
 *
 * Даны две строки a и b. Необходимо найти длину самой длинной
 * необычной подпоследовательности (longest uncommon subsequence)
 * между ними. Необычная подпоследовательность - это такая подпоследовательность
 * одной из строк, которая не является подпоследовательностью другой строки.
 *
 * Важные уточнения:
 * Подпоследовательность получается удалением нуля или более символов
 * из исходной строки без изменения порядка оставшихся символов
 * Необычная подпоследовательность должна существовать в одной строке,
 * но не существовать как подпоследовательность в другой
 * Если необычной подпоследовательности не существует, возвращается -1
 * (примеры внизу)
 *
 * Самое быстрое решение - 1 ms
 */
class Solution {
    public int findLUSlength(String a, String b) {
        // Если строки идентичны, не существует необычной подпоследовательности
        if (a.equals(b)) {
            return -1;
        }

        // Если строки разные, самая длинная необычная подпоследовательность -
        // это вся более длинная строка (или любая строка, если они равной длины)
        return Math.max(a.length(), b.length());
    }
}
/*
Пример 1:
Вход: a = "aba", b = "cdc"
Ответ: 3
Объяснение: Одна из необычных подпоследовательностей - "aba",
потому что "aba" является подпоследовательностью a,
но не является подпоследовательностью b

Пример 2:
Вход: a = "aaa", b = "bbb"
Ответ: 3
Объяснение: Обе строки имеют длину 3, и ни одна не является подпоследовательностью другой

Пример 3:
Вход: a = "aaa", b = "aaa"
Ответ: -1
Объяснение: Все подпоследовательности a также являются подпоследовательностями b, и наоборот

Объяснение подхода:
Проверка идентичности строк: Если строки полностью одинаковы,
любая подпоследовательность одной будет подпоследовательностью
другой, поэтому возвращаем -1

Возврат максимальной длины: Если строки разные, вся более длинная
строка автоматически будет необычной подпоследовательностью,
так как она не может быть подпоследовательностью более короткой строки
 */
