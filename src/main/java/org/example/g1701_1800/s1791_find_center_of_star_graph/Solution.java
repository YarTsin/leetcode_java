package org.example.g1701_1800.s1791_find_center_of_star_graph;

// #Easy #Graph

/**
 * 1791. Find Center of Star Graph
 *
 * Дан неориентированный граф в виде звезды. Граф имеет n вершин,
 * пронумерованных от 1 до n. Одна вершина является центром звезды,
 * и она соединена с всеми остальными n-1 вершинами. Каждое
 * из остальных ребер соединяет центр с одной из периферийных вершин.
 *
 * Вам дан массив ребер edges, где edges[i] = [u_i, v_i] представляет
 * ребро между вершинами u_i и v_i. Необходимо найти центр звезды.
 *
 * Свойства звездного графа:
 * Центр звезды соединен со всеми остальными вершинами
 * Периферийные вершины соединены только с центром
 * В звездном графе ровно n-1 ребер
 * Центр имеет степень n-1 (количество соединений)
 * Периферийные вершины имеют степень 1
 * (примеры внизу)
 *
 * Решение - использование свойства центра звезды
 * Это самое быстрое решение - 0 ms
 *
 * Свойство
 * центр должен присутствовать в каждом ребре.
 *
 * Решение имеет временную сложность O(1) и пространственную сложность O(1).
 */
class Solution {
    public int findCenter(int[][] edges) {
        // Берем первое ребро
        int firstEdgeStart = edges[0][0];
        int firstEdgeEnd = edges[0][1];

        // Берем второе ребро
        int secondEdgeStart = edges[1][0];
        int secondEdgeEnd = edges[1][1];

        // Центр звезды должен быть вершиной, которая присутствует в обоих ребрах
        // Проверяем все возможные комбинации

        // Если начало первого ребра совпадает с началом второго ребра
        if (firstEdgeStart == secondEdgeStart) {
            return firstEdgeStart;
        }

        // Если начало первого ребра совпадает с концом второго ребра
        if (firstEdgeStart == secondEdgeEnd) {
            return firstEdgeStart;
        }

        // Если конец первого ребра совпадает с началом второго ребра
        if (firstEdgeEnd == secondEdgeStart) {
            return firstEdgeEnd;
        }

        // Если конец первого ребра совпадает с концом второго ребра
        if (firstEdgeEnd == secondEdgeEnd) {
            return firstEdgeEnd;
        }

        // Этот случай никогда не произойдет для валидной звезды
        return -1;
    }
}
/*
Пример 1
Вход: edges = [[1,2],[2,3],[4,2]]
Результат: 2
Объяснение:
1 - 2 - 3
    |
    4
Вершина 2 соединена с вершинами 1, 3, 4 - это центр звезды

Пример 2
Вход: edges = [[1,2],[5,1],[1,3],[1,4]]
Результат: 1
Объяснение: Вершина 1 соединена с вершинами 2, 3, 4, 5 - это центр звезды
 */