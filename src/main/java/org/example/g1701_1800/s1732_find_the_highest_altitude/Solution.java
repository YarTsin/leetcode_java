package org.example.g1701_1800.s1732_find_the_highest_altitude;

// #Easy #Array #Prefix_Sum #LeetCode_75_Prefix_Sum

/**
 * 1732. Find the Highest Altitude
 *
 * Велосипедист отправляется в путешествие, которое состоит
 * из нескольких подъемов и спусков. Дан массив gain длины n,
 * где gain[i] представляет собой чистый прирост высоты между точками i и i + 1.
 * Путешествие начинается с высоты 0. Нужно найти максимальную высоту,
 * которой достиг велосипедист во время путешествия.
 *
 * Формула:
 * Высота в точке 0: 0
 * Высота в точке 1: 0 + gain[0]
 * Высота в точке 2: 0 + gain[0] + gain[1]
 * ...
 * Высота в точке i: gain[0] + gain[1] + ... + gain[i-1]
 *
 * Нужно найти максимальное значение среди всех высот.
 * (примеры внизу)
 *
 * Решение однопроходное - самое быстрое - 0 ms.
 *
 * Подход:
 * Вычисляем текущую высоту на каждом шаге и отслеживаем максимальную высоту.
 *
 */
class Solution {
    public int largestAltitude(int[] gain) {
        int currentAltitude = 0;
        int maxAltitude = 0;

        for (int i = 0; i < gain.length; i++) {
            // Обновляем текущую высоту
            currentAltitude += gain[i];
            // Обновляем максимальную высоту
            if (currentAltitude > maxAltitude) {
                maxAltitude = currentAltitude;
            }
        }

        return maxAltitude;
    }
}
/*
Пример 1
Input: gain = [-5,1,5,0,-7]
Output: 1
Объяснение:
Высота 0: 0
Высота 1: 0 + (-5) = -5
Высота 2: -5 + 1 = -4
Высота 3: -4 + 5 = 1
Высота 4: 1 + 0 = 1
Высота 5: 1 + (-7) = -6
Максимальная высота: 1

Пример 2
Input: gain = [-4,-3,-2,-1,4,3,2]
Output: 0
Объяснение:
Высота 0: 0
Высота 1: 0 + (-4) = -4
Высота 2: -4 + (-3) = -7
Высота 3: -7 + (-2) = -9
Высота 4: -9 + (-1) = -10
Высота 5: -10 + 4 = -6
Высота 6: -6 + 3 = -3
Высота 7: -3 + 2 = -1
Максимальная высота: 0 (начальная высота)
 */