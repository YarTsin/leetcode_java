package org.example.g1701_1800.s1779_find_nearest_point_that_has_the_same_x_or_y_coordinate;

// #Easy #Array

/**
 * 1779. Find Nearest Point That Has the Same X or Y Coordinate
 *
 * Вам даны целочисленные координаты вашего текущего местоположения:
 * x и y. Также дан массив points, где каждый points[i] = [a_i, b_i]
 * представляет координаты i-й точки на плоскости.
 *
 * Задача — найти индекс точки из массива points, которая:
 * Имеет ту же координату x, что и ваше местоположение, ИЛИ ту же координату y.
 * Среди всех точек, удовлетворяющих условию 1, является ближайшей по манхэттенскому
 * расстоянию до вашего местоположения.
 * Если существует несколько таких точек с одинаковым минимальным расстоянием,
 * нужно вернуть точку с наименьшим индексом.
 *
 * Манхэттенское расстояние между двумя точками (x1, y1) и (x2, y2)
 * вычисляется как |x1 - x2| + |y1 - y2|.
 *
 * Если ни одна точка не удовлетворяет условию 1, необходимо вернуть -1.
 * (примеры внизу)
 *
 * Решение - линейный проход - 2-е решение - 3 ms
 *
 * Это решение имеет временную сложность O(n), где n - количество
 * точек в массиве. Это оптимально, так как необходимо проверить каждую точку.
 * Пространственная сложность составляет O(1),
 * так как используются только несколько переменных.
 *
 */
class Solution {
    public int nearestValidPoint(int x, int y, int[][] points) {
        // Инициализируем минимальное расстояние максимально возможным целым числом
        int minManhattanDistance = Integer.MAX_VALUE;
        // Инициализируем индекс ближайшей точки значением -1 (на случай, если valid point не найдется)
        int indexOfClosestPoint = -1;

        // Проходим по всем точкам в массиве
        for (int currentIndex = 0; currentIndex < points.length; currentIndex++) {
            // Извлекаем координаты текущей точки
            int currentPointX = points[currentIndex][0];
            int currentPointY = points[currentIndex][1];

            // Проверяем, является ли точка valid (имеет совпадающий x или y)
            boolean isValidPoint = (currentPointX == x || currentPointY == y);

            if (isValidPoint) {
                // Вычисляем манхэттенское расстояние до текущей valid точки
                int currentDistance = Math.abs(x - currentPointX) + Math.abs(y - currentPointY);

                // Сравниваем полученное расстояние с текущим минимумом
                if (currentDistance < minManhattanDistance) {
                    // Нашли точку с меньшим расстоянием, обновляем оба параметра
                    minManhattanDistance = currentDistance;
                    indexOfClosestPoint = currentIndex;
                } else if (currentDistance == minManhattanDistance) {
                    // Расстояние такое же, как текущий минимум, сравниваем индексы
                    if (currentIndex < indexOfClosestPoint) {
                        // Текущий индекс меньше, обновляем индекс ближайшей точки
                        indexOfClosestPoint = currentIndex;
                    }
                    // Если текущий индекс больше или равен, ничего не делаем
                }
                // Если currentDistance > minManhattanDistance, точку игнорируем
            }
            // Если точка не valid, переходим к следующей
        }

        // Возвращаем индекс ближайшей valid точки (или -1, если таких не было)
        return indexOfClosestPoint;
    }
}
/*
Пример 1
Вход: x = 3, y = 4, points = [[1,2],[3,1],[2,4],[2,3],[4,4]]
Результат: 2
Объяснение:
Проверяем точки:
Точка 0 [1,2]: ни x (1 != 3), ни y (2 != 4) не совпадают. → Не подходит.
Точка 1 [3,1]: x совпадает (3 == 3), y не совпадает. → Подходит.
        Расстояние = |3-3| + |4-1| = 0 + 3 = 3.
Точка 2 [2,4]: x не совпадает, y совпадает (4 == 4). → Подходит.
        Расстояние = |3-2| + |4-4| = 1 + 0 = 1.
Точка 3 [2,3]: ни x, ни y не совпадают. → Не подходит.
Точка 4 [4,4]: x не совпадает, y совпадает (4 == 4). → Подходит.
        Расстояние = |3-4| + |4-4| = 1 + 0 = 1.
Подходящие точки: 1 (расст. 3), 2 (расст. 1), 4 (расст. 1).
Минимальное расстояние = 1. Точки с этим расстоянием: 2 и 4.
Выбираем точку с наименьшим индексом: индекс 2.

Пример 2
Вход: x = 3, y = 4, points = [[3,4]]
Результат: 0
Объяснение: Единственная точка имеет совпадающие x и y. Расстояние = 0.

Пример 3
Вход: x = 3, y = 4, points = [[2,3]]
Результат: -1
Объяснение: У точки x=2 (не 3), y=3 (не 4).
Условие не выполняется. Возвращаем -1.
 */