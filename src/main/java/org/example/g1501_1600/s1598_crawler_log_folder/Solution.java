package org.example.g1501_1600.s1598_crawler_log_folder;

// #Easy #Array #String #Stack

/**
 * 1598. Crawler Log Folder
 * Описание задачи:
 * Лог-файл операционной системы записывает все операции,
 * выполняемые файловым менеджером. Файловый менеджер начинается работу
 * в корневой папке (обозначается как "/"). Затем он выполняет одну
 * из следующих операций:
 * "../": Перейти в родительскую папку текущей папки. (Если текущая папка
 * является корневой, то остаться в ней).
 * "./": Остаться в текущей папке.
 * "x/": Перейти в дочернюю папку с именем x.
 *
 * Вам дан список строк logs, где каждый элемент - это одна
 * из вышеперечисленных операций. Верните минимальное количество
 * операций, необходимое для возврата в корневую папку после выполнения
 * всех операций.
 * (примеры внизу)
 *
 * Решение - с использованием счетчика глубины
 * 2-е решение по скорости - 1 ms
 *
 * Сложность:
 * Время: O(n), где n - количество операций в logs
 * Память: O(1)
 *
 */
class Solution {
    public int minOperations(String[] logs) {
        int depth = 0; // Текущая глубина относительно корневой папки

        for (String operation : logs) {
            if (operation.equals("../")) {
                // Переход в родительскую папку (если не в корне)
                if (depth > 0) {
                    depth--;
                }
            } else if (operation.equals("./")) {
                // Остаемся в текущей папке - глубина не меняется
                continue;
            } else {
                // Переход в дочернюю папку - увеличиваем глубину
                depth++;
            }
        }

        return depth;
    }
}

/*
Пример1
Вход: logs = ["d1/","d2/","../","d21/","./"]
Выход: 2
Объяснение:
Операция "d1/" переходит в папку d1 (глубина 1).
Операция "d2/" переходит в папку d2 (глубина 2).
Операция "../" возвращается в d1 (глубина 1).
Операция "d21/" переходит в d21 (глубина 2).
Операция "./" остается в d21 (глубина 2).
Теперь мы находимся на глубине 2, поэтому нужно
2 операции "../" чтобы вернуться в корень.

Пример2
Вход: logs = ["d1/","d2/","./","d3/","../","d31/"]
Выход: 3

Пример3
Вход: logs = ["d1/","../","../","../"]
Выход: 0
Объяснение:
Операция "d1/" переходит в d1 (глубина 1).
Три операции "../" возвращают в корень (глубина 0).

 */
