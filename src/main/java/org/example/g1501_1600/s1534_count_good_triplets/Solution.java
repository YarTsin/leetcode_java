package org.example.g1501_1600.s1534_count_good_triplets;

// #Easy #Array #Enumeration

/**
 * 1534. Count Good Triplets
 * Дан массив целых чисел arr и три целых числа a, b и c.
 * Необходимо найти количество "хороших" троек (i, j, k),
 * удовлетворяющих следующим условиям:
 * 0 <= i < j < k < arr.length
 * |arr[i] - arr[j]| <= a
 * |arr[j] - arr[k]| <= b
 * |arr[i] - arr[k]| <= c
 * Где |x| обозначает абсолютное значение (модуль) числа x.
 * Важное примечание: Все три условия должны выполняться одновременно.
 * (примеры внизу)
 *
 * Решение - Brute Force с оптимизацией
 * Небыстрое решение - 10 ms
 *
 */
class Solution {
    public int countGoodTriplets(int[] arr, int a, int b, int c) {
        int count = 0;
        int n = arr.length;

        // Перебираем все возможные тройки (i, j, k)
        for (int i = 0; i < n - 2; i++) {
            for (int j = i + 1; j < n - 1; j++) {
                // Проверяем первое условие заранее
                if (Math.abs(arr[i] - arr[j]) <= a) {
                    for (int k = j + 1; k < n; k++) {
                        // Проверяем оставшиеся два условия
                        if (Math.abs(arr[j] - arr[k]) <= b &&
                                Math.abs(arr[i] - arr[k]) <= c) {
                            count++;
                        }
                    }
                }
            }
        }

        return count;
    }
}
/*
Пример 1
Вход: arr = [3,0,1,1,9,7], a = 7, b = 2, c = 3
Выход: 4
Объяснение: Существует 4 хорошие тройки:
[(3,0,1), (3,0,1), (3,1,1), (0,1,1)]

Пример 2
Вход: arr = [1,1,2,2,3], a = 0, b = 0, c = 1
Выход: 0
Объяснение: Ни одна тройка не удовлетворяет всем условиям одновременно.
 */
