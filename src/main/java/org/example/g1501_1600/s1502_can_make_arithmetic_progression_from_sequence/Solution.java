package org.example.g1501_1600.s1502_can_make_arithmetic_progression_from_sequence;

// #Easy #Array #Sorting

import java.util.Arrays;

/**
 * 1502. Can Make Arithmetic Progression From Sequence
 *
 * Дан массив чисел arr.
 *
 * Арифметическая прогрессия — это последовательность чисел, в которой разность
 * между любыми двумя последовательными элементами постоянна.
 *
 * Задача: Определить, можно ли переставить элементы массива arr таким образом,
 * чтобы получилась арифметическая прогрессия.
 * Если да, вернуть true; иначе вернуть false.
 *
 * Важное уточнение: Поскольку нам разрешена перестановка элементов,
 * нам не нужно физически переставлять массив. Достаточно проверить,
 * могут ли числа в массиве образовывать арифметическую прогрессию
 * при некотором порядке следования.
 *
 * Пример
 * Ввод: arr = [3, 5, 1]
 * Объяснение: Мы можем переставить элементы как [1, 3, 5] или [5, 3, 1].
 * Разность (шаг) прогрессии в первом случае равна 2 (3-1=2, 5-3=2),
 * во втором случае -2 (3-5=-2, 1-3=-2). Оба варианта являются
 * арифметическими прогрессиями.
 *
 * Решение через сортировку - это 3-е решение - 2 ms
 *
 * Сложность:
 *
 * Временная сложность: O(n log n). Сложность доминируется операцией
 * сортировки массива из n элементов. Последующий линейный проход имеет сложность O(n).
 * Пространственная сложность: O(1) или O(n). В зависимости от используемого
 * алгоритма сортировки. Для примитивов в Java Arrays.sort() использует
 * QuickSort (O(log n) stack space), что считается O(1) для практических
 * целей, или TimSort (O(n)), но в любом случае это оптимально для задачи.
 *
 */
class Solution {
    public boolean canMakeArithmeticProgression(int[] arr) {
        // Сортируем исходный массив
        Arrays.sort(arr);

        // Вычисляем ожидаемую разность (шаг) прогрессии
        // после сортировки.
        int expectedDifference = arr[1] - arr[0];

        // Проходим по массиву, начиная с третьего элемента (индекс 2),
        // и проверяем разность между текущим и предыдущим элементом.
        for (int i = 2; i < arr.length; i++) {
            int currentDifference = arr[i] - arr[i - 1];
            // Если какая-либо разность не равна ожидаемой,
            // последовательность не может быть арифметической прогрессией.
            if (currentDifference != expectedDifference) {
                return false;
            }
        }

        // Если все разности равны, возвращаем true.
        return true;
    }
}