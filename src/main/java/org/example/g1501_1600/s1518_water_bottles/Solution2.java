package org.example.g1501_1600.s1518_water_bottles;

/**
 * Альтернативное решение (Математическая формула)
 * (разобрать)
 *
 * Решение с временной сложностью O(1) и пространственной сложностью O(1).
 *
 * Подход:
 * Каждая бутылка в конечном счете будет выпита
 * Каждая бутылка, кроме последних, требует numExchange - 1
 * пустых бутылок для "финансирования" своей утилизации
 *
 * Формула: numBottles + ⌊(numBottles - 1) / (numExchange - 1)⌋
 *
 * Обоснование:
 * Первые numBottles дают numBottles пустых
 * Каждые numExchange - 1 пустых бутылок дают одну дополнительную бутылку
 * Исключение: последняя бутылка не дает возможности для обмена
 */
class Solution2 {
    public int numWaterBottles(int numBottles, int numExchange) {
        // Математическая формула для расчета общего количества
        // numBottles - начальное количество
        // (numBottles - 1) / (numExchange - 1) - количество дополнительных бутылок от обменов
        return numBottles + (numBottles - 1) / (numExchange - 1);
    }
}
