package org.example.g0101_0200.s0190_reverse_bits;

// #Easy #Top_Interview_Questions #Bit_Manipulation #Divide_and_Conquer
// #Top_Interview_150_Bit_Manipulation


/**
 * 190. Reverse Bits
 * Условие задачи: Дано 32-битное беззнаковое целое число.
 * Необходимо обратить порядок его битов и вернуть полученное число.
 *
 * Примечание: В некоторых языках (например, Java) нет беззнаковых целых типов.
 * В этом случае входные и выходные данные будут представляться как знаковые
 * целые типы, но это не должно влиять на реализацию, так как внутреннее
 * двоичное представление числа одинаково.
 *
 * Пример 1
 * Input: n = 00000010100101000001111010011100
 * Output:    964176192 (00111001011110000010100101000000)
 * Объяснение:
 * Входное число: 00000010100101000001111010011100
 * Обращенное:    00111001011110000010100101000000
 * В десятичной: 964176192
 *
 * Пример 2
 * Input: n = 11111111111111111111111111111101
 * Output:   3221225471 (10111111111111111111111111111111)
 * Объяснение:
 * Входное число: 11111111111111111111111111111101
 * Обращенное:    10111111111111111111111111111111
 * В десятичной: 3221225471
 *
 * Решение - Побитовое сдвиги
 *
 * Сложность:
 * Время: O(1) - всегда 32 итерации
 * Память: O(1) - используем только константную дополнительную память
 *
 * Самое быстрое решение - 0 ms
 *
 */
public class Solution {
    // you need treat n as an unsigned value
    public int reverseBits(int n) {
        int result = 0;

        // Обрабатываем все 32 бита
        for (int i = 0; i < 32; i++) {
            // Сдвигаем результат влево для освобождения младшего бита
            result <<= 1;

            // Добавляем младший бит n к результату
            result |= (n & 1);

            // Сдвигаем n вправо для обработки следующего бита
            n >>>= 1;
        }

        return result;
    }
}