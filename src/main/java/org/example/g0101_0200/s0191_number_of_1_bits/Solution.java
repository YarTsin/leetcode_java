package org.example.g0101_0200.s0191_number_of_1_bits;

// #Easy #Top_Interview_Questions #Bit_Manipulation
// #Top_Interview_150_Bit_Manipulation

/**
 * 191. Number of 1 Bits
 *
 * Условие задачи: Напишите функцию, которая принимает
 * 32-битное беззнаковое целое число и возвращает количество
 * битов со значением '1' (также известное как вес Хэмминга).
 *
 * Пример 1
 * Input: n = 00000000000000000000000000001011
 * Output: 3
 * Объяснение:
 * Входное число имеет три установленных бита '1'
 *
 * Пример 2
 * Input: n = 00000000000000000000000010000000
 * Output: 1
 *
 * Пример 3
 * Input: n = 11111111111111111111111111111101
 * Output: 31
 *
 * Решение - Алгоритм Брайана Кернигана
 * todo интересно разобрать подробнее
 *
 * Сложность:
 * Время: O(k), где k - количество установленных битов (в худшем случае O(32))
 * Память: O(1) - используем только константную дополнительную память
 *
 * Самое быстрое решение - 0 ms
 */
public class Solution {
    // you need to treat n as an unsigned value
    public int hammingWeight(int n) {
        int count = 0;

        // Обрабатываем число как беззнаковое
        while (n != 0) {
            count++;
            // Убираем младший установленный бит
            n = n & (n - 1);
        }

        return count;
    }
}