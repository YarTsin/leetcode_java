package org.example.g0801_0900.s0888_fair_candy_swap;

import java.util.HashSet;
import java.util.Set;

/**
 * #Easy #Array #HashMap
 * Алиса и Боб имеют коробки с конфетами разных размеров. Вам даны два массива:
 * aliceSizes - размеры коробок Алисы
 * bobSizes - размеры коробок Боба
 * Алиса и Боб хотят обменяться одной коробкой конфет так,
 * чтобы после обмена у них обоих было одинаковое общее количество конфет.
 * Необходимо вернуть массив [размер коробки Алисы, размер коробки Боба] -
 * какие коробки им нужно обменять.
 *
 * Если есть несколько ответов, можно вернуть любой из них.
 * Гарантируется, что ответ существует.
 *
 * Пример 1
 * Вход: aliceSizes = [1,1], bobSizes = [2,2]
 * Выход: [1,2]
 * Объяснение:
 * Сумма Алисы: 1 + 1 = 2
 * Сумма Боба: 2 + 2 = 4
 * После обмена 1 (Алиса) на 2 (Боб):
 * Алиса: 1 + 2 = 3
 * Боб: 2 + 1 = 3
 *
 * Пример 2
 * Вход: aliceSizes = [1,2], bobSizes = [2,3]
 * Выход: [1,2] или [2,3]
 * Объяснение:
 * Сумма Алисы: 1 + 2 = 3
 * Сумма Боба: 2 + 3 = 5
 * После обмена 1 (Алиса) на 2 (Боб):
 * Алиса: 2 + 2 = 4
 * Боб: 1 + 3 = 4
 *
 * todo разобратося подробнее
 *
 * Оптимальное решение - с использованием HashSet - 8 ms
 */
class Solution {
    public int[] fairCandySwap(int[] aliceSizes, int[] bobSizes) {
        int sumA = 0, sumB = 0;

        // Вычисляем суммы конфет
        for (int num : aliceSizes) sumA += num;
        for (int num : bobSizes) sumB += num;

        // Вычисляем разницу, которую нужно компенсировать
        int diff = (sumA - sumB) / 2;

        // Создаем множество коробок Боба для быстрого поиска
        Set<Integer> bobSet = new HashSet<>();
        for (int num : bobSizes) bobSet.add(num);

        // Ищем подходящую пару для обмена
        for (int a : aliceSizes) {
            int neededBobCandy = a - diff;
            if (bobSet.contains(neededBobCandy)) {
                return new int[]{a, neededBobCandy};
            }
        }

        return new int[0]; // Гарантируется, что ответ существует
    }
}
/*
Объяснение решения:
Вычисление сумм:
Считаем общее количество конфет у Алисы и Боба

Вычисление разницы:
Находим разницу, которую нужно компенсировать обменом

Быстрый поиск:
Используем HashSet для быстрого поиска нужной коробки Боба
Для каждой коробки Алисы вычисляем, какая коробка Боба нужна
Проверяем наличие такой коробки у Боба

Временная сложность: O(n + m) - где n и m длины массивов
Пространственная сложность: O(m) - для хранения множества Боба
 */