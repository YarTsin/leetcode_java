package org.example.g0801_0900.s0876_middle_of_the_linked_list;

// #Easy #Two_Pointers #Linked_List

import org.example.a_leetcode_classes.ListNode;

/**
 * 876. Middle of the Linked List
 * Дан головной узел односвязного списка.
 * Необходимо найти средний узел этого списка.
 * Если есть два средних узла (в списке четное количество элементов),
 * нужно вернуть второй из них.
 *
 * Пример 1
 * Вход: [1,2,3,4,5]
 * Выход: [3,4,5]
 * Объяснение: В списке 5 элементов, средний элемент - третий (3)
 *
 * Пример 2
 * Вход: [1,2,3,4,5,6]
 * Выход: [4,5,6]
 * Объяснение: В списке 6 элементов, два средних - третий и четвертый.
 * Нужно вернуть второй (четвертый)
 *
 * Решение - Алгоритм "Черепаха и Заяц" (Tortoise and Hare)
 * Самое быстрое решение - 0 ms
 *
 * Сложность: O(n) по времени, O(1) по дополнительной памяти
 *
 */
class Solution {
    public ListNode middleNode(ListNode head) {
        ListNode slow = head;  // Медленный указатель (двигается на 1 узел за шаг)
        ListNode fast = head;  // Быстрый указатель (двигается на 2 узла за шаг)

        // Пока быстрый указатель не достиг конца списка
        while (fast != null && fast.next != null) {
            slow = slow.next;          // Медленный на 1 шаг
            fast = fast.next.next;     // Быстрый на 2 шага
        }

        // Когда быстрый достиг конца, медленный будет в середине
        return slow;
    }
}