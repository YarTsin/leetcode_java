package org.example.g0801_0900.s0892_surface_area_of_3d_shapes;

// #Easy #Array #Math #Matrix #Geometry

/**
 * 892. Surface Area of 3D Shapes
 *
 * Условие задачи:
 * Дана сетка n x n, где grid[i][j] представляет высоту куба,
 * расположенного в позиции (i, j). Каждый куб имеет размер
 * 1 x 1 x 1. Необходимо вычислить общую площадь поверхности
 * получившейся 3D-фигуры.
 *
 * Важные моменты:
 * Кубы размещены на плоской поверхности
 * Смежные кубы (по вертикали или горизонтали) могут "склеиваться",
 * уменьшая общую площадь поверхности
 * Нужно учесть все видимые грани кубов
 * (примеры внизу)
 *
 * Постепенное вычисление площади с учетом соседних кубов
 * Не быстрое - 6 ms
 *
 * Сложность:
 * Временная: O(N²), где N - размер сетки
 * Пространственная: O(1)
 */
class Solution {
    public int surfaceArea(int[][] grid) {
        int n = grid.length;
        int totalArea = 0;

        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                int height = grid[i][j];

                if (height > 0) {
                    // Верхняя и нижняя поверхности (2 единицы на каждый куб в столбце)
                    totalArea += 2;

                    // Передняя грань (если это первый ряд или куб выше, чем соседний спереди)
                    if (i == 0) {
                        totalArea += height;
                    } else {
                        totalArea += Math.max(0, height - grid[i - 1][j]);
                    }

                    // Задняя грань (если это последний ряд или куб выше, чем соседний сзади)
                    if (i == n - 1) {
                        totalArea += height;
                    } else {
                        totalArea += Math.max(0, height - grid[i + 1][j]);
                    }

                    // Левая грань (если это первый столбец или куб выше, чем соседний слева)
                    if (j == 0) {
                        totalArea += height;
                    } else {
                        totalArea += Math.max(0, height - grid[i][j - 1]);
                    }

                    // Правая грань (если это последний столбец или куб выше, чем соседний справа)
                    if (j == n - 1) {
                        totalArea += height;
                    } else {
                        totalArea += Math.max(0, height - grid[i][j + 1]);
                    }
                }
            }
        }

        return totalArea;
    }
}

/*
Пример 1
Вход: grid = [[1,2],[3,4]]
Выход: 34
Объяснение:
- Нижняя поверхность: 4 куба = 4 единицы
- Верхняя поверхность: 4 + 3 + 2 + 1 = 10 единиц
- Боковые поверхности: нужно учесть все видимые грани

Пример 2
Вход: grid = [[1,1,1],[1,0,1],[1,1,1]]
Выход: 32
Объяснение:
- Центральный куб отсутствует (высота 0)
- Но окружающие кубы создают "дыру", что влияет на площадь поверхности



 */