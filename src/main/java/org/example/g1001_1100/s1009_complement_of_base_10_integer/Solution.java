package org.example.g1001_1100.s1009_complement_of_base_10_integer;

// #Easy #Bit_Manipulation #Интересно

/**
 * 1009. Complement of Base 10 Integer
 *
 * Для заданного целого числа n необходимо вернуть его
 * дополнение (complement). Дополнение числа - это такое число,
 * которое получается инвертированием всех битов в двоичном
 * представлении исходного числа (замена 0 на 1 и 1 на 0).
 *
 * Важное уточнение: предполагается, что число представлено
 * без ведущих нулей в двоичной форме. Это означает, что при
 * инверсии мы не должны учитывать ведущие нули.
 * (примеры внизу)
 *
 * Решение 1 - самое быстрое - 0 ms
 *
 * Подход:
 * Создаем битовую маску, состоящую из единиц, длина которой соответствует
 * длине двоичного представления числа n
 * Инвертируем все биты числа n с помощью оператора ~
 * Применяем маску к инвертированному числу, чтобы обнулить
 * ведущие единицы (которые появились при инверсии)
 *
 * Сложность:
 * Время: O(1) - так как максимальное количество итераций
 * цикла ограничено количеством битов в int (32)
 * Память: O(1) - используем только константное количество переменных
 */
class Solution {
    public int bitwiseComplement(int n) {
        // Если число равно 0, его дополнение равно 1
        if (n == 0) {
            return 1;
        }

        // Создаем маску из единиц такой же длины, как двоичное представление n
        int mask = 1;
        while (mask < n) {
            mask = (mask << 1) | 1;
        }

        // Инвертируем биты и применяем маску, чтобы убрать ведущие единицы
        return ~n & mask;
    }
}
/*
Пример 1
Input: n = 5
Output: 2
Объяснение:
Двоичное представление 5: "101"
Инверсия: "010" что равно 2 в десятичной системе

Шаги:
Для n = 5 (двоичное "101"):
Создаем маску: 1 → 11 → 111 (в двоичном виде)
Инвертируем n: ~5 = ...1111111111111010 (32 бита)
Применяем маску: 1111111111111010 & 0000000000000111 = 0000000000000010 = 2

Пример 2
Input: n = 7
Output: 0
Объяснение:
Двоичное представление 7: "111"
Инверсия: "000" что равно 0 в десятичной системе

Пример 3
Input: n = 10
Output: 5
Объяснение:
Двоичное представление 10: "1010"
Инверсия: "0101" что равно 5 в десятичной системе
 */