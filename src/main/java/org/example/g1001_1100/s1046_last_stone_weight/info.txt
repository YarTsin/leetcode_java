Решение - с использованием Max-Heap

Основной подход:
Используем максимальную кучу (max-heap) для эффективного получения
двух самых тяжелых камней на каждом шаге.
В Java PriorityQueue по умолчанию является min-heap,
поэтому нужно использовать компаратор для создания max-heap.

Алгоритм:
Поместить все камни в max-heap
Пока в куче больше одного элемента:
Извлечь два самых тяжелых камня (y и x, где y ≥ x)
Если y > x, положить обратно в кучу камень весом y - x
Вернуть оставшийся камень или 0

=====

Вывод:
Решение с использованием max-heap является наиболее эффективным
и элегантным для этой задачи. Оно оптимально использует структуру
данных для быстрого доступа к максимальным элементам.
Альтернативные решения с повторной сортировкой или подсчетом
менее эффективны либо менее универсальны.