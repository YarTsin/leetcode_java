package org.example.g1001_1100.s1013_partition_array_into_three_parts_with_equal_sum;

// #Easy #Array #Greedy

/**
 * 1013. Partition Array Into Three Parts With Equal Sum
 *
 * Условие: Дан массив целых чисел arr. Необходимо определить, можно ли разбить
 * массив на три непрерывных части с равными суммами.
 * Существуют ли индексы i и j такие, что:  0 < i < j < arr.length - 1
 * Сумма элементов от [0] до [i-1] равна сумме элементов от [i] до [j-1],
 * которая равна сумме элементов от [j] до [arr.length-1]
 *
 * Пример 1
 * Вход: arr = [0,2,1,-6,6,-7,9,1,2,0,1]
 * Выход: true
 * Объяснение: 0 + 2 + 1 = -6 + 6 - 7 + 9 + 1 = 2 + 0 + 1
 *
 * Пример 2
 * Вход: arr = [3,3,6,5,-2,2,5,1,-9,4]
 * Выход: true
 * Объяснение: 3 + 3 = 6 = 5 - 2 + 2 + 5 + 1 - 9 + 4
 *
 * Это самое быстрое решение - 1ms
 */
class Solution {
    public boolean canThreePartsEqualSum(int[] arr) {
        int totalSum = 0;

        // Вычисляем общую сумму массива
        for (int num : arr) {
            totalSum += num;
        }

        // Если общая сумма не делится на 3 без остатка, разбиение невозможно
        if (totalSum % 3 != 0) {
            return false;
        }

        int targetSum = totalSum / 3; // Целевая сумма для каждой части
        int currentSum = 0;           // Текущая накопленная сумма
        int partsFound = 0;           // Количество найденных частей

        for (int i = 0; i < arr.length; i++) {
            currentSum += arr[i];

            // Если текущая сумма равна целевой, значит нашли одну часть
            if (currentSum == targetSum) {
                partsFound++;
                currentSum = 0; // Сбрасываем текущую сумму для следующей части

                // Если нашли две части, оставшиеся элементы автоматически образуют третью
                if (partsFound == 2 && i < arr.length - 1) {
                    return true;
                }
            }
        }

        return false;
    }
}
/*
Объяснение оптимального решения
Подход:
Вычисляем общую сумму - если она не делится на 3 без остатка, разбиение невозможно
Определяем целевую сумму - каждая из трех частей должна иметь сумму totalSum / 3
Ищем две точки разбиения - проходим по массиву и находим, где текущая сумма достигает целевого значения
Проверяем условия - если нашли две части с нужной суммой, и остались элементы для третьей части, возвращаем true

Ключевые моменты:
Не нужно явно проверять третью часть - если первые две имеют нужную сумму, третья автоматически будет иметь такую же
Важно проверить, что после второй точки разбиения остаются элементы (i < arr.length - 1)

Сложность: O(n), где n - длина массива
 */
