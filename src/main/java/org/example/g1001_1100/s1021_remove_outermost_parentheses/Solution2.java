package org.example.g1001_1100.s1021_remove_outermost_parentheses;

/**
 * Альтернативное решение (с использованием указателей - менее интуитивное)
 * Основной подход:
 * Можно запоминать начальный индекс каждой примитивной подстроки.
 * Когда счетчик глубины становится равным нулю, мы знаем, что нашли
 * конец примитивной подстроки. Затем мы можем взять подстроку
 * от startIndex + 1 до currentIndex - 1 (чтобы удалить внешние скобки)
 * и добавить ее к результату.
 *
 * Почему это решение хуже:
 * Оно менее прямое и требует больше манипуляций с индексами.
 * Использование String.substring может привести к созданию множества
 * промежуточных строковых объектов,
 * хотя в современных версиях Java это оптимизировано.
 */
class Solution2 {
    public String removeOuterParentheses(String s) {
        StringBuilder result = new StringBuilder();
        int depth = 0;
        int startOfPrimitive = 0; // Запоминаем начало примитивной подстроки

        for (int i = 0; i < s.length(); i++) {
            char c = s.charAt(i);
            if (c == '(') {
                depth++;
            } else {
                depth--;
            }

            // Когда глубина снова становится нулевой,
            // мы нашли конец примитивной подстроки
            if (depth == 0) {
                // Добавляем подстроку без первой и последней скобок
                // от startOfPrimitive + 1 до i - 1
                result.append(s.substring(startOfPrimitive + 1, i));
                // Следующая примитивная подстрока начнется на следующем символе
                startOfPrimitive = i + 1;
            }
        }

        return result.toString();
    }
}