package org.example.g1001_1100.s1021_remove_outermost_parentheses;

// #Easy #String #Stack #Brackets

/**
 * 1021. Remove Outermost Parentheses
 *
 * Условие задачи:
 * Дана корректная (valid) строка s, состоящая только из круглых
 * скобок '(' и ')'. Корректность означает, что скобки расставлены
 * правильно (все открытые скобки имеют закрывающие, и нет
 * нарушений вложенности).
 *
 * Требуется удалить из строки самые внешние (outermost) скобки каждой
 * primitive valid parenthesis string (примитивной корректной подстроки)
 * в ее каноническом разложении.
 *
 * Определение из задачи:
 * Valid parenthesis string S является примитивной (primitive), если она
 * не может быть разбита на две непересекающиеся непустые подстроки,
 * которые также являются корректными.
 *
 * Проще говоря:
 * Представьте, что исходная строка s состоит из нескольких примитивных
 * корректных подстрок, соединенных вместе.
 * Например, строка "(()())(())" состоит из двух примитивных
 * подстрок: "(()())" и "(())".
 * Нам нужно для каждой такой примитивной подстроки удалить
 * ее самые внешние (первую открывающую и последнюю закрывающую)
 * скобки, а затем соединить результаты.
 * (примеры внизу)
 *
 * Решение с помощью счетчика глубины - 3-е по скорости - 2 ms
 *
 * Сложность:
 * Временная сложность: O(n), где n - длина строки s.
 * Мы проходим по строке ровно один раз.
 * Пространственная сложность: O(n) для StringBuilder
 * (выходная строка может быть почти такой же длины, как и входная).
 */
class Solution {
    public String removeOuterParentheses(String s) {
        // Используем StringBuilder для эффективной конкатенации строк
        StringBuilder result = new StringBuilder();
        // Счетчик глубины вложенности скобок
        int depth = 0;

        // Проходим по каждому символу в исходной строке
        for (char currentChar : s.toCharArray()) {
            if (currentChar == '(') {
                // Встретили открывающую скобку
                // Увеличиваем глубину перед проверкой
                depth++;
                // Если глубина стала больше 1, это не внешняя скобка -> добавляем в результат
                if (depth > 1) {
                    result.append(currentChar);
                }
            } else { // currentChar == ')'
                // Встретили закрывающую скобку
                // Если глубина больше 1, это не внешняя скобка -> добавляем в результат
                if (depth > 1) {
                    result.append(currentChar);
                }
                // Уменьшаем глубину после проверки
                depth--;
            }
        }

        // Преобразуем StringBuilder в строку и возвращаем
        return result.toString();
    }
}
/*
Пример 1
Ввод: s = "(()())(())"
Вывод: "()()()"
Объяснение:
Исходная строка разбивается на две примитивные подстроки:
"(()())" + "(())".
После удаления внешних скобок от каждой подстроки получаем:
"()()" + "()" = "()()()".


Пример 2
Ввод: s = "(()())(())(()(()))"
Вывод: "()()()()(())"
Объяснение:
Исходная строка разбивается на три примитивные подстроки:
 "(()())" + "(())" + "(()(()))".
После удаления внешних скобок:
"()()" + "()" + "()(())" = "()()()()(())".


Пример 3
Ввод: s = "()()"
Вывод: ""
Объяснение:
Исходная строка разбивается на две примитивные подстроки: "()" + "()".
После удаления внешних скобок от каждой
(которые являются единственными скобками в подстроке) получаем: "" + "" = "".

 */