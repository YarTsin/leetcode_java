package org.example.g0901_1000.s0999_available_captures_for_rook;

// #Easy #Array #Matrix #Simulation #Game

/**
 * 999. Available Captures for Rook
 * На шахматной доске 8x8 находится одна ладья (rook)
 * и несколько слонов (bishops) и пешек (pawns).
 * Пустые клетки обозначены точками '.'.
 *
 * Ладья может двигаться по горизонтали или вертикали любое
 * количество клеток, но не может перепрыгивать через другие фигуры.
 * Ладья может захватывать пешку, но не может захватывать слона.
 *
 * Верните количество пешек, которых ладья может захватить за один ход.
 *
 * Обозначения на доске:
 * 'R' - ладья (rook)
 * '.' - пустая клетка
 * 'B' - слон (bishop)
 * 'p' - пешка (pawn)
 * (примеры внизу)
 *
 * Решение 1 - самое быстрое - 0 ms
 *
 * Подход:
 * Найдем позицию ладьи на доске
 * Проверим все 4 направления от ладьи (вверх, вниз, влево, вправо)
 * В каждом направлении двигаемся до тех пор, пока не встретим:
 * Пешку → увеличиваем счетчик и прекращаем движение в этом направлении
 * Слона → прекращаем движение в этом направлении
 * Край доски → прекращаем движение
 *
 * Временная сложность: O(1) - так как доска фиксированного размера 8x8
 * Пространственная сложность: O(1)
 */
class Solution {
    public int numRookCaptures(char[][] board) {
        int captures = 0;

        // Находим позицию ладьи
        int rookRow = -1;
        int rookCol = -1;

        for (int i = 0; i < 8; i++) {
            for (int j = 0; j < 8; j++) {
                if (board[i][j] == 'R') {
                    rookRow = i;
                    rookCol = j;
                    break;
                }
            }
            if (rookRow != -1) break;
        }

        // Проверяем все 4 направления от ладьи
        int[][] directions = {{-1, 0}, {1, 0}, {0, -1}, {0, 1}}; // вверх, вниз, влево, вправо

        for (int[] dir : directions) {
            int row = rookRow + dir[0];
            int col = rookCol + dir[1];

            // Двигаемся в направлении пока не выйдем за границы доски
            while (row >= 0 && row < 8 && col >= 0 && col < 8) {
                char current = board[row][col];

                if (current == 'p') {
                    captures++; // Нашли пешку
                    break;
                } else if (current == 'B') {
                    break; // Нашли слона - блокировка
                }

                // Продолжаем движение в том же направлении
                row += dir[0];
                col += dir[1];
            }
        }

        return captures;
    }
}
/*
Пример 1
Вход:
[[".",".",".",".",".",".",".","."],
 [".",".",".","p",".",".",".","."],
 [".",".",".","R",".",".",".","p"],
 [".",".",".",".",".",".",".","."],
 [".",".",".",".",".",".",".","."],
 [".",".",".","p",".",".",".","."],
 [".",".",".",".",".",".",".","."],
 [".",".",".",".",".",".",".","."]]

Выход: 3
Объяснение: Ладья может захватить 3 пешки.

Пример 2
Вход:
[[".",".",".",".",".",".",".","."],
 [".","p","p","p","p","p",".","."],
 [".","p","p","B","p","p",".","."],
 [".","p","B","R","B","p",".","."],
 [".","p","p","B","p","p",".","."],
 [".","p","p","p","p","p",".","."],
 [".",".",".",".",".",".",".","."],
 [".",".",".",".",".",".",".","."]]

Выход: 0
Объяснение: Слоны блокируют все пути к пешкам.


 */