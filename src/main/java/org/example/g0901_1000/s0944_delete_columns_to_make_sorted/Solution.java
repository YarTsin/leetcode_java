package org.example.g0901_1000.s0944_delete_columns_to_make_sorted;

// #Easy #Array #String

/**
 * 944. Delete Columns to Make Sorted
 *
 * Вам дан массив строк strs размера n, где каждый элемент представляет
 * собой строку одинаковой длины. Строки расположены
 * в виде сетки (n строк, m столбцов).
 *
 * Вам нужно определить количество столбцов, которые не отсортированы
 * лексикографически (в порядке возрастания). Другими словами, нужно
 * удалить (посчитать) все столбцы, где буквы в этом столбце не идут
 * в порядке возрастания сверху вниз.
 * (примеры внизу)
 *
 * Решение: последовательное - не быстрое - 8 ms
 *
 * Проверяем каждый столбец по отдельности. Для каждого столбца проходим
 * по всем строкам и проверяем, что каждый символ меньше или равен
 * следующему символу в этом же столбце. Если находим хотя бы одну пару,
 * где текущий символ больше следующего, увеличиваем счетчик и переходим
 * к следующему столбцу.
 */
class Solution {
    public int minDeletionSize(String[] strs) {
        // Если массив пустой или содержит одну строку, все столбцы отсортированы
        if (strs == null || strs.length <= 1) {
            return 0;
        }

        int rowCount = strs.length;
        int columnCount = strs[0].length();
        int columnsToDelete = 0;

        // Проходим по каждому столбцу
        for (int column = 0; column < columnCount; column++) {
            // Проверяем текущий столбец на отсортированность
            for (int row = 0; row < rowCount - 1; row++) {
                // Сравниваем текущий символ со следующим в том же столбце
                char currentChar = strs[row].charAt(column);
                char nextChar = strs[row + 1].charAt(column);

                // Если текущий символ больше следующего - столбец не отсортирован
                if (currentChar > nextChar) {
                    columnsToDelete++;
                    break; // Прерываем проверку этого столбца
                }
            }
        }

        return columnsToDelete;
    }
}
/*
Пример 1
Вход: strs = ["cba","daf","ghi"]
Выход: 1
Объяснение:
Сетка выглядит так:
  c b a
  d a f
  g h i

Столбцы:
0: 'c', 'd', 'g' - отсортирован (c < d < g)
1: 'b', 'a', 'h' - НЕ отсортирован (b > a)
2: 'a', 'f', 'i' - отсортирован (a < f < i)

Только столбец 1 не отсортирован, поэтому ответ: 1

Пример 2
Вход: strs = ["zyx","wvu","tsr"]
Выход: 3
Объяснение:
Все три столбца не отсортированы:
0: 'z', 'w', 't' - z > w
1: 'y', 'v', 's' - y > v
2: 'x', 'u', 'r' - x > u
 */
