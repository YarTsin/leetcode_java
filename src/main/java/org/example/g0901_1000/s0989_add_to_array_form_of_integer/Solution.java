package org.example.g0901_1000.s0989_add_to_array_form_of_integer;

// #Easy #Array #Math

import java.util.ArrayList;
import java.util.List;

/**
 * 989. Add to Array-Form of Integer
 *
 * Массивная форма целого числа - это массив цифр, упорядоченных
 * от самой значимой к наименее значимой слева направо.
 * Например, для числа 1231 массивная форма будет [1,2,3,1].
 *
 * Дана массивная форма целого числа num и целое число k.
 * Верните массивную форму числа num + k.
 *
 * Пример 1
 * Вход: num = [1,2,0,0], k = 34
 * Выход: [1,2,3,4]
 * Объяснение: 1200 + 34 = 1234
 *
 * Пример 2
 * Вход: num = [2,7,4], k = 181
 * Выход: [4,5,5]
 * Объяснение: 274 + 181 = 455
 *
 * Пример 3
 * Вход: num = [2,1,5], k = 806
 * Выход: [1,0,2,1]
 * Объяснение: 215 + 806 = 1021
 *
 * Ограничения:
 * 1 <= num.length <= 10^4
 * 0 <= num[i] <= 9
 * num не содержит ведущих нулей, кроме самого числа 0
 * 1 <= k <= 10^4
 *
 * Решение - поразрядное сложение - не быстрое решение 55 ms
 *
 * Подход:
 * Складываем числа поразрядно, начиная с младших разрядов.
 * Используем арифметику с переносом, аналогично сложению в столбик.
 */
class Solution {
    public List<Integer> addToArrayForm(int[] num, int k) {
        List<Integer> result = new ArrayList<>();
        int carry = 0;
        int i = num.length - 1;

        // Складываем пока есть цифры в массиве или в числе k, или есть перенос
        while (i >= 0 || k > 0 || carry > 0) {
            int digitFromNum = (i >= 0) ? num[i] : 0;
            int digitFromK = k % 10;

            // Суммируем цифры и перенос
            int total = digitFromNum + digitFromK + carry;

            // Вычисляем новую цифру и перенос
            int newDigit = total % 10;
            carry = total / 10;

            // Добавляем новую цифру в начало результата
            result.add(0, newDigit);

            // Переходим к следующим разрядам
            i--;
            k /= 10;
        }

        return result;
    }
}
