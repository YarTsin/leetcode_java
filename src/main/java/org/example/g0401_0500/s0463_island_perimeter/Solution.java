package org.example.g0401_0500.s0463_island_perimeter;

// #Easy #Array #Depth_First_Search #Breadth_First_Search #Matrix

/**
 * 463. Island Perimeter
 *
 * Вычислить периметр острова в двумерной сетке.
 * Условия:
 * Сетка представлена как grid[i][j], где:
 * - 1 представляет землю (остров)
 * - 0 представляет воду
 * Остров полностью окружен водой
 * На сетке есть ровно один остров (или нет ни одного)
 * Ячейки соединены по горизонтали и вертикали (не по диагонали)
 * Остров не имеет озер (воды внутри острова)
 *
 * Периметр вычисляется как сумма всех границ ячеек земли, которые:
 * Граничат с водой ИЛИ
 * Находятся на краю сетки
 *
 * Формат ввода: Двумерный массив grid[][] размером m × n
 * Формат вывода: Целое число - периметр острова
 * примеры внизу
 *
 * todo пока непонятно
 *
 * Оптимальное решение (Итеративный подход)
 *
 * Объяснение подхода:
 * Проходим по всем ячейкам сетки
 * Для каждой ячейки земли проверяем 4 соседние ячейки
 * Если соседняя ячейка - вода или край сетки, добавляем 1 к периметру
 * Временная сложность: O(m × n)
 * Пространственная сложность: O(1)
 *
 * 2 решение по скорости - 4 ms
 */
class Solution {
    public int islandPerimeter(int[][] grid) {
        if (grid == null || grid.length == 0 || grid[0].length == 0) {
            return 0;
        }

        int rows = grid.length;
        int cols = grid[0].length;
        int perimeter = 0;

        for (int row = 0; row < rows; row++) {
            for (int col = 0; col < cols; col++) {
                if (grid[row][col] == 1) {
                    // Проверяем все четыре направления

                    // Верхняя граница: если первая строка или сверху вода
                    if (row == 0 || grid[row - 1][col] == 0) {
                        perimeter++;
                    }

                    // Нижняя граница: если последняя строка или снизу вода
                    if (row == rows - 1 || grid[row + 1][col] == 0) {
                        perimeter++;
                    }

                    // Левая граница: если первый столбец или слева вода
                    if (col == 0 || grid[row][col - 1] == 0) {
                        perimeter++;
                    }

                    // Правая граница: если последний столбец или справа вода
                    if (col == cols - 1 || grid[row][col + 1] == 0) {
                        perimeter++;
                    }
                }
            }
        }

        return perimeter;
    }
}
/*
Пример 1
Вход:
grid = [
  [0,1,0,0],
  [1,1,1,0],
  [0,1,0,0],
  [1,1,0,0]
]

Выход: 16

Пример 2
Вход:
grid = [
  [1,0]
]

Выход: 4

 */