package org.example.g0401_0500.s0441_arranging_coins;

/**
 * #Easy #Math #BinarySearch
 * 441. Arranging Coins
 *
 * Задача: Определить количество полных рядов лестницы,
 * которую можно построить из n монет.
 *
 * Условия:
 * Лестница состоит из k рядов
 * i-й ряд содержит ровно i монет
 * Последний ряд может быть неполным
 * Нужно найти количество полных рядов
 *
 * Математическая формула:
 * Общее количество монет для k полных рядов:
 * S = k*(k+1)/2
 *
 * Нужно найти максимальное k такое, что k*(k+1)/2 ≤ n
 *
 * Формат ввода: int n - количество монет (0 ≤ n ≤ 2³¹ - 1)
 * Формат вывода: int - количество полных рядов
 * примеры внизу
 *
 * Оптимальное решение - бинарный поиск
 *
 * 2 по скорости решение - 1 ms.
 */
class Solution {
    public int arrangeCoins(int n) {
        if (n == 0) return 0;

        long left = 1;
        long right = n;
        long result = 0;

        while (left <= right) {
            long mid = left + (right - left) / 2;
            long totalCoins = mid * (mid + 1) / 2;

            if (totalCoins <= n) {
                result = mid;      // Запоминаем текущий валидный результат
                left = mid + 1;    // Пробуем больше рядов
            } else {
                right = mid - 1;   // Пробуем меньше рядов
            }
        }

        return (int)result;
    }
}
/*
Пример 1
Вход: n = 5
Выход: 2
Объяснение:
Ряд 1: ●
Ряд 2: ●●
Остаток: ●● (неполный ряд 3)

Пример 2:
Вход: n = 8
Выход: 3
Объяснение:
Ряд 1: ●
Ряд 2: ●●
Ряд 3: ●●●
Остаток: ●● (неполный ряд 4)

 */
