package org.example.g0401_0500.s0409_longest_palindrome;

import java.util.HashMap;
import java.util.Map;

/**
 * #Easy #String #HashMap #Greedy
 *
 * Дана строка s, состоящая из буквенных символов
 * (верхнего и нижнего регистра). Необходимо найти длину
 * самого длинного палиндрома, который можно построить
 * из символов этой строки.
 * Регистр символов имеет значение ('A' ≠ 'a').
 *
 * Палиндром - это строка, которая читается одинаково в обоих направлениях.
 *
 * Пример 1
 * Вход: "abccccdd"
 * Выход: 7
 * Объяснение:
 * Можно построить палиндром "dccaccd" (или "dccbccd") длиной 7.
 *
 * Пример 2
 * Вход: "abc"
 * Выход: 1
 * Объяснение:
 * Можно использовать любой один символ.
 *
 * Оптимальное решение - использование HashMap
 * не самое быстрое решение - 7 ms
 */
class Solution {
    public int longestPalindrome(String s) {
        // Подсчитываем частоту каждого символа
        Map<Character, Integer> frequency = new HashMap<>();
        for (char c : s.toCharArray()) {
            frequency.put(c, frequency.getOrDefault(c, 0) + 1);
        }

        int length = 0;
        boolean hasOdd = false;

        // Обрабатываем частоты символов
        for (int count : frequency.values()) {
            if (count % 2 == 0) {
                // Четное количество - используем все символы
                length += count;
            } else {
                // Нечетное количество - используем count-1 символов
                length += count - 1;
                hasOdd = true; // Запоминаем, что был нечетный символ
            }
        }

        // Если был хотя бы один символ с нечетной частотой,
        // можно добавить один символ в центр палиндрома
        if (hasOdd) {
            length += 1;
        }

        return length;
    }
}
/*
Объяснение решения:
Подсчет частот:
Используем HashMap для подсчета количества каждого символа

Формирование палиндрома:
Для символов с четной частотой используем все символы
Для символов с нечетной частотой используем count-1 символов
Запоминаем, что был хотя бы один символ с нечетной частотой

Центральный символ:
Если был хотя бы один символ с нечетной частотой,
добавляем один символ в центр
Временная сложность: O(n) - где n длина строки
Пространственная сложность: O(1) - так как количество различных символов ограничено (52 буквы)
 */
