package org.example.g0401_0500.s0415_add_strings;

// #Easy #String #Math #Simulation

/**
 * 415. Add Strings
 * Даны два неотрицательных целых числа num1 и num2,
 * представленные в виде строк. Необходимо вернуть сумму
 * этих чисел в виде строки.
 *
 * Ограничения:
 * 1 <= num1.length, num2.length <= 10⁴
 * num1 и num2 состоят только из цифр (0-9)
 * Оба числа не содержат ведущих нулей, кроме самого числа 0
 *
 * Важные особенности:
 * Нельзя использовать встроенные функции для преобразования строк в BigInteger
 * Нельзя напрямую преобразовывать входные строки в целые числа
 *
 * Пример 1
 * Ввод: num1 = "11", num2 = "123"
 * Вывод: "134"
 *
 * Пример 2
 * Ввод: num1 = "456", num2 = "77"
 * Вывод: "533"
 *
 * Решение - поразрядное сложение
 *
 * Сложность:
 * Временная сложность: O(max(n, m)), где n и m - длины строк
 * Пространственная сложность: O(max(n, m)) для хранения результата
 *
 * Самое быстрое решение - 1 ms
 *
 */
class Solution {
    public String addStrings(String num1, String num2) {
        // Указатели для обхода строк справа налево (от младших разрядов к старшим)
        int i = num1.length() - 1;
        int j = num2.length() - 1;

        // Переменная для хранения переноса
        int carry = 0;

        // StringBuilder для построения результата
        StringBuilder result = new StringBuilder();

        // Пока есть цифры в любой из строк или есть перенос
        while (i >= 0 || j >= 0 || carry > 0) {
            // Получаем цифры из обеих строк (0 если строка закончилась)
            int digit1 = (i >= 0) ? num1.charAt(i) - '0' : 0;
            int digit2 = (j >= 0) ? num2.charAt(j) - '0' : 0;

            // Суммируем цифры и перенос
            int sum = digit1 + digit2 + carry;

            // Вычисляем новую цифру и перенос
            int currentDigit = sum % 10;
            carry = sum / 10;

            // Добавляем текущую цифру в результат
            result.append(currentDigit);

            // Перемещаем указатели
            i--;
            j--;
        }

        // Разворачиваем результат, так как добавляли цифры с конца
        return result.reverse().toString();
    }
}

/*
Объяснение подхода:
Поразрядное сложение: Обрабатываем числа по одной цифре за раз,
начиная с младших разрядов (справа)
Перенос: Сохраняем перенос в отдельную переменную для использования
в следующем разряде
Обработка разных длин: Если одна строка короче другой, используем
0 для недостающих разрядов
Обратный порядок: Собираем результат в обратном порядке, затем разворачиваем
 */
