package org.example.g0401_0500.s0459_repeated_substring_pattern;

// #Easy #String #String_Matching #KMP

/**
 * 459. Repeated Substring Pattern
 * Дана непустая строка s. Проверить, можно ли получить эту строку
 * путем конкатенации одной из ее непустых подстрок многократно.
 * Другими словами, состоит ли строка из multiple копий одной подстроки.
 *
 * Ограничения:
 * 1 <= s.length <= 10⁴
 * s состоит из строчных английских букв
 *
 * Важные особенности:
 * Подстрока должна быть непустой
 * Конкатенация должна состоять из двух или более копий подстроки
 * Подстрока может быть любой длины (от 1 до n/2)
 *
 * Пример 1
 * Ввод: s = "abab"
 * Вывод: true
 * Объяснение: "ab" повторяется два раза → "abab"
 *
 * Пример 2
 * Ввод: s = "aba"
 * Вывод: false
 *
 * Решение - проверка делителей - 2 по скорости - 6 ms
 */
class Solution {
    public boolean repeatedSubstringPattern(String s) {
        int n = s.length();

        // Проверяем все возможные длины подстрок (делители длины строки)
        for (int len = 1; len <= n / 2; len++) {
            // Длина должна быть делителем общей длины
            if (n % len != 0) {
                continue;
            }

            String pattern = s.substring(0, len);
            boolean isValid = true;

            // Проверяем, повторяется ли pattern по всей строке
            for (int i = len; i < n; i += len) {
                String currentSegment = s.substring(i, i + len);
                if (!currentSegment.equals(pattern)) {
                    isValid = false;
                    break;
                }
            }

            if (isValid) {
                return true;
            }
        }

        return false;
    }
}

/*
Объяснение подхода:
Перебор делителей: Проверяем все возможные длины подстрок от 1 до n/2
Проверка делимости: Длина подстроки должна быть делителем длины строки
Проверка повторения: Для каждой возможной длины проверяем,
повторяется ли подстрока по всей строке

Сложность:
Временная сложность: O(n√n) - в худшем случае
Пространственная сложность: O(n) - для хранения подстрок
 */