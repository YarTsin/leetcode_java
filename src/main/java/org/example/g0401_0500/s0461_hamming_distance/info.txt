Сравнение производительности:

Integer.bitCount() - самый быстрый (нативные оптимизации)

Алгоритм Кернигана - эффективен для sparse numbers

Поразрядный подсчет - стабильная производительность

Строковое преобразование - наименее эффективно

Дополнительная информация: Метод Integer.bitCount() в Java использует
оптимизированную реализацию, часто с использованием
SIMD инструкций или lookup tables, что делает его самым быстрым вариантом.