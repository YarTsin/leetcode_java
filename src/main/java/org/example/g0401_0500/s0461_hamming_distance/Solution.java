package org.example.g0401_0500.s0461_hamming_distance;

// #Easy #Bit_Manipulation #Hamming_Distance #XOR #Bit_Count
// #Kernighan

/**
 * 461. Hamming Distance
 * Расстояние Хэмминга между двумя целыми числами
 * - это количество позиций, в которых соответствующие
 * биты различаются. Даны два целых числа x и y, необходимо
 * вернуть расстояние Хэмминга между ними.
 *
 * Ограничения:
 * 0 <= x, y <= 2³¹ - 1
 *
 * Важные особенности:
 * Расстояние Хэмминга измеряет различие между двумя бинарными представлениями
 * Используется в теории кодирования, криптографии и других областях
 * Для чисел разной длины бинарные представления дополняются ведущими нулями
 * (примеры внизу)
 *
 * Решение -  XOR + Bit Count)
 *
 * Объяснение подхода:
 * XOR операция: x ^ y дает число, где биты установлены в 1 только на тех позициях, где биты x и y различаются
 * Подсчет битов: Считаем количество единиц в результате XOR
 *
 * Сложность:
 * Временная сложность: O(1) - фиксированное количество битов (32)
 * Пространственная сложность: O(1)
 *
 * Это самое быстрое решение - 0 ms
 *
 *
 */
public class Solution {
    /**
     * Вычисляем XOR - биты будут равны 1 там, где биты различаются
     *  Подсчитываем количество установленных битов (единиц)
     */
    public int hammingDistance(int x, int y) {
        return Integer.bitCount(x ^ y);
    }
}
/*
Пример 1
Ввод: x = 1, y = 4
Вывод: 2
Объяснение:
1 (0 0 0 1)
4 (0 1 0 0)
     ↑   ↑
Различаются 2 бита

Пример 2
Ввод: x = 3, y = 1
Вывод: 1
Объяснение:
3 (0 0 1 1)
1 (0 0 0 1)
       ↑
Различается 1 бит


 */
