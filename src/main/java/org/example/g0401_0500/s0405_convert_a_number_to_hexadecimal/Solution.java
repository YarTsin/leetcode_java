package org.example.g0401_0500.s0405_convert_a_number_to_hexadecimal;

// #Easy #Math #Bit_Manipulation

/**
 * 405. Convert a Number to Hexadecimal
 *
 * Дано целое число. Необходимо преобразовать его в шестнадцатеричное (hex)
 * представление. Для отрицательных чисел следует использовать
 * дополнение до двух.
 *
 * Особенности:
 * Нельзя использовать встроенные функции преобразования
 * Все буквы в результате должны быть строчными
 * Не должно быть ведущих нулей (кроме самого нуля)
 *
 * Примеры:
 * Input: 26
 * Output: "1a"
 *
 * Input: -1
 * Output: "ffffffff"
 *
 * Решение: Итеративный подход с битовыми операциями
 *
 * todo разобраться подробнее
 */
class Solution {
    public String toHex(int num) {
        if (num == 0) return "0";

        char[] hexChars = "0123456789abcdef".toCharArray();
        StringBuilder result = new StringBuilder();

        while (num != 0) {
            // Получаем последние 4 бита
            int digit = num & 0xf;
            result.append(hexChars[digit]);
            // Арифметический сдвиг вправо на 4 бита
            num >>>= 4;
        }

        return result.reverse().toString();
    }
}
/*
Объяснение:
Особый случай: если число 0, сразу возвращаем "0"
Массив символов: содержит все hex-цифры

Цикл обработки:
Извлекаем последние 4 бита (num & 0xf)
Находим соответствующий символ
Сдвигаем число на 4 бита вправо (>>> - беззнаковый сдвиг)
Реверс результата: так как цифры добавлялись с конца
 */
