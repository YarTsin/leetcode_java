package org.example.g1601_1700.s1700_number_of_students_unable_to_eat_lunch;

// #Easy #Array #Stack #Simulation #Queue

/**
 * 1700. Number of Students Unable to Eat Lunch
 *
 * Школьная столовая предлагает бутерброды в стопке.
 * Бутерброды могут быть двух типов: квадратные (0) и круглые (1).
 * Студенты стоят в очереди, и каждый студент предпочитает либо квадратные,
 * либо круглые бутерброды.
 *
 * Процесс:
 * Самый верхний бутерброд в стопке проверяется
 * Если первый студент в очереди предпочитает этот тип бутерброда,
 * он берет его и уходит
 * Если студент не предпочитает этот тип, он переходит в конец очереди
 * Процесс продолжается до тех пор, пока ни один студент не захочет взять
 * верхний бутерброд
 *
 * Нужно: Вернуть количество студентов, которые не смогут поесть.
 * (примеры внизу)
 *
 *  Решение - с подсчетом - самое быстрое
 *
 */
class Solution {
    public int countStudents(int[] students, int[] sandwiches) {
        // Подсчитываем количество студентов, предпочитающих каждый тип бутерброда
        int squarePrefer = 0; // Счетчик студентов, предпочитающих квадратные (0)
        int circlePrefer = 0;  // Счетчик студентов, предпочитающих круглые (1)

        for (int student : students) {
            if (student == 0) {
                squarePrefer++;
            } else {
                circlePrefer++;
            }
        }

        // Проходим по стопке бутербродов
        for (int sandwich : sandwiches) {
            if (sandwich == 0) {
                // Если квадратный бутерброд, но нет студентов, которые его хотят
                if (squarePrefer == 0) {
                    break;
                }
                squarePrefer--;
            } else {
                // Если круглый бутерброд, но нет студентов, которые его хотят
                if (circlePrefer == 0) {
                    break;
                }
                circlePrefer--;
            }
        }

        // Оставшиеся студенты, которые не смогли поесть
        return squarePrefer + circlePrefer;
    }
}
/*
Вход: students = [1,1,0,0], sandwiches = [0,1,0,1]
Процесс:
Студент 1 хочет 1, бутерброд 0 → студент уходит в конец: [1,0,0,1]
Студент 1 хочет 1, бутерброд 0 → студент уходит в конец: [0,0,1,1]
Студент 0 хочет 0, бутерброд 0 → берет бутерброд: очередь [0,1,1], бутерброды [1,0,1]
Студент 0 хочет 0, бутерброд 1 → студент уходит в конец: [1,1,0]
Студент 1 хочет 1, бутерброд 1 → берет бутерброд: очередь [1,0], бутерброды [0,1]
Студент 1 хочет 1, бутерброд 0 → студент уходит в конец: [0,1]
Студент 0 хочет 0, бутерброд 0 → берет бутерброд: очередь [1], бутерброды [1]
Студент 1 хочет 1, бутерброд 1 → берет бутерброд
Результат: 0 (все поели)
 */