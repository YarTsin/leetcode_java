package org.example.g1601_1700.s1614_maximum_nesting_depth_of_the_parentheses;

// #Easy #String #Stack #Скобки

/**
 * 1614. Maximum Nesting Depth of the Parentheses
 *
 * Дана корректная скобочная последовательность VPS
 * (Valid Parentheses String). Нужно найти максимальную глубину
 * вложенности скобок.
 *
 * VPS может быть одного из видов:
 * Пустая строка ""
 * Строка "(" + A + ")", где A - VPS
 * Строка A + B, где A и B - VPS
 *
 * Глубина скобочной последовательности определяется как:
 * Глубина "" = 0
 * Глубина "(" + A + ")" = 1 + глубина A
 * Глубина A + B = max(глубина A, глубина B)
 *
 * Пример 1
 * Ввод: s = "(1+(2*3)+((8)/4))+1"  * Вывод: 3
 * Объяснение: Цифры 8 находится внутри 3 уровней вложенных скобок.
 *
 * Пример 2
 * Ввод: s = "(1)+((2))+(((3)))"
 * Вывод: 3
 *
 * Пример 3
 * Ввод: s = "()(())((()()))"
 * Вывод: 3
 *
 * Решение с использованием счетчика - самое быстрое 0 ms
 */
class Solution {
    public int maxDepth(String s) {
        int currentDepth = 0;    // Текущий уровень вложенности
        int maxDepth = 0;        // Максимальная глубина

        for (int i = 0; i < s.length(); i++) {
            char c = s.charAt(i);

            if (c == '(') {
                // Открывающая скобка - увеличиваем текущую глубину
                currentDepth++;
                // Обновляем максимальную глубину
                if (currentDepth > maxDepth) {
                    maxDepth = currentDepth;
                }
            } else if (c == ')') {
                // Закрывающая скобка - уменьшаем текущую глубину
                currentDepth--;
            }
            // Для других символов (цифры, операторы) ничего не делаем
        }

        return maxDepth;
    }
}