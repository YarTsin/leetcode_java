package org.example.g1601_1700.s1619_mean_of_array_after_removing_some_elements;

// #Easy #Array #Sorting

import java.util.Arrays;

/**
 * 1619. Mean of Array After Removing Some Elements
 * Дан целочисленный массив arr. Нужно удалить из массива наименьшие
 * 5% и наибольшие 5% элементов, а затем вычислить среднее значение
 * оставшихся элементов.
 *
 * Точные требования:
 * Массив содержит от 20 до 1000 элементов
 * Нужно удалить минимальные 5% и максимальные 5% элементов
 * Если после удаления массив пуст, вернуть 0
 * Ответ должен быть с точностью до 10^-5
 * (примеры внизу)
 *
 * Решение с сортировкой 3-е решение - 3 ms
 *
 * Сложность:
 * Время: O(n log n) - из-за сортировки
 * Память: O(1) или O(n) в зависимости от реализации сортировки
 *
 */
class Solution {
    public double trimMean(int[] arr) {
        // Сортируем массив
        Arrays.sort(arr);

        int n = arr.length;
        // Вычисляем количество элементов для удаления (5% с каждого конца)
        int removeCount = n / 20;

        double sum = 0;
        // Суммируем элементы от removeCount до n - removeCount - 1
        for (int i = removeCount; i < n - removeCount; i++) {
            sum += arr[i];
        }

        // Вычисляем среднее значение
        return sum / (n - 2 * removeCount);
    }
}
/*
Пример 1
Ввод: arr = [1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3]
Вывод: 2.00000
Объяснение:
Всего 20 элементов, нужно удалить 5% = 1 минимальный и 1 максимальный элемент.
Удаляем 1 и 3, остаются [2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2]
Среднее = 36/18 = 2.0

Пример 2
Ввод: arr = [6,2,7,5,1,2,0,3,10,2,5,0,5,5,0,8,7,6,8,0]
Вывод: 4.00000
 */
