Объяснение подходов:
1. Решение с сортировкой и бинарным поиском (оптимальное)
Сложность: O(n log n) по времени, O(1) по памяти
Основные шаги:
Сортируем массив
Для каждого возможного x от 1 до n:
Используем бинарный поиск для нахождения первого элемента >= x
Подсчитываем количество элементов >= x
Если количество равно x - возвращаем x
Преимущества:
Хорошая производительность
Использует преимущества сортировки


2. Решение с сортировкой и одним проходом
Сложность: O(n log n) по времени, O(1) по памяти
Основные шаги:
Сортируем массив
Для x от 1 до n проверяем:
(n-x)-й элемент >= x
(n-x-1)-й элемент < x (если существует)
Преимущества:
Более эффективно после сортировки
Не требует бинарного поиска для каждого x

3. Простое решение (перебор)
Сложность: O(n²) по времени, O(1) по памяти
Основные шаги:
Для каждого x от 0 до n:
Подсчитываем количество элементов >= x
Если count == x, возвращаем x
Недостатки:
Медленно для больших массивов
Не использует преимущества сортировки