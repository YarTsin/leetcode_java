package org.example.g0601_0700.s0674_longest_continuous_increasing_subsequence;

// #Easy #Array

/**
 * 674. Longest Continuous Increasing Subsequence
 *
 * Дан несортированный массив целых чисел nums.
 * Необходимо найти длину самой длинной непрерывной возрастающей
 * подпоследовательности (строго возрастающей).
 *
 * Непрерывная возрастающая подпоследовательность определяется
 * двумя индексами l и r (l < r) такими, что:
 * Это непрерывный отрезок массива [nums[l], nums[l+1], ..., nums[r]]
 * Все элементы строго возрастают: nums[i] < nums[i+1] для всех l ≤ i < r
 *
 * Пример 1
 * Вход: nums = [1,3,5,4,7]
 * Выход: 3
 * Объяснение:
 * Самая длинная непрерывная возрастающая подпоследовательность [1,3,5] длиной 3.
 * Обратите внимание, что [1,3,5,7] не является непрерывной.
 *
 * Пример 2
 * Вход: nums = [2,2,2,2,2]
 * Выход: 1
 * Объяснение:
 * Самая длинная непрерывная возрастающая подпоследовательность [2] длиной 1.
 *
 * Решение - 1 проход - 2-e по скорости - 1 ms
 * Сложность:
 * Временная: O(n) - один проход по массиву
 * Пространственная: O(1) - константная память
 */
class Solution {
    public int findLengthOfLCIS(int[] nums) {
        if (nums == null || nums.length == 0) {
            return 0;
        }

        int maxLength = 1; // Минимальная длина - 1
        int currentLength = 1;

        for (int i = 1; i < nums.length; i++) {
            if (nums[i] > nums[i - 1]) {
                // Продолжаем текущую возрастающую последовательность
                currentLength++;
                maxLength = Math.max(maxLength, currentLength);
            } else {
                // Начинаем новую последовательность
                currentLength = 1;
            }
        }

        return maxLength;
    }
}
