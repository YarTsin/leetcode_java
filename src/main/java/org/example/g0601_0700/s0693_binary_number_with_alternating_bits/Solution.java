package org.example.g0601_0700.s0693_binary_number_with_alternating_bits;

// #Easy #Bit_Manipulation


/**
 * 693. Binary Number with Alternating Bits
 *
 * Дано положительное целое число n. Необходимо определить,
 * имеет ли его двоичное представление чередующиеся биты.
 * То есть, каждые два соседних бита в двоичном представлении
 * должны иметь разные значения.
 *
 * Пример 1
 * Вход: n = 5  * Выход: true
 * Объяснение:
 * Двоичное представление 5: 101
 * Биты чередуются: 1, 0, 1 → true
 *
 * Пример 2
 * Вход: n = 7  * Выход: false
 * Объяснение:
 * Двоичное представление 7: 111
 * Биты не чередуются: 1, 1, 1 → false
 *
 * Решение - побитовые операции - самое быстрое решение - 0 ms
 *
 * Сложность:
 * Временная: O(1) - постоянное время
 * Пространственная: O(1) - константная память
 *
 *
 */
class Solution {
    public boolean hasAlternatingBits(int n) {
        // Получаем число, где все биты сдвинуты на 1 вправо
        int shifted = n >> 1;

        // XOR исходного числа и сдвинутого
        // Если биты чередуются, результат будет числом из всех 1
        int xorResult = n ^ shifted;

        // Проверяем, состоит ли xorResult только из единиц
        // (xorResult + 1) должно быть степенью двойки
        return (xorResult & (xorResult + 1)) == 0;
    }
}
