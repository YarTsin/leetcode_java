package org.example.g0601_0700.s0700_search_in_a_binary_search_tree;

// #Easy #Tree #Binary_Tree #Binary_Search_Tree #LeetCode_75_Binary_Search_Tree

import org.example.a_leetcode_classes.TreeNode;

/**
 * 700. Search in a Binary Search Tree
 *
 * Дано корневой узел бинарного дерева поиска (BST) и
 * целое значение val. Необходимо найти узел в BST,
 * значение которого равно val, и вернуть поддерево с корнем в этом узле.
 * Если такого узла не существует, вернуть null.
 * (это на основе поиска)
 *
 * Что такое бинарное дерево поиска (BST)?
 * Бинарное дерево поиска - это бинарное дерево со следующими свойствами:
 * Значение каждого узла в левом поддереве меньше значения корневого узла
 * Значение каждого узла в правом поддереве больше значения корневого узла
 * Оба поддерева (левое и правое) также являются BST
 * (примеры внизу)
 *
 * Итеративное решение - самое быстрое 0 ms
 *
 * Преимущества:
 * Временная сложность: O(h), где h - высота дерева
 * Пространственная сложность: O(1) - не используем дополнительную память
 * Простая и эффективная реализация
 */
class Solution {
    public TreeNode searchBST(TreeNode root, int targetValue) {
        // Начинаем с корневого узла
        TreeNode currentNode = root;

        // Пока текущий узел не null и не содержит искомое значение
        while (currentNode != null && currentNode.val != targetValue) {
            // Если искомое значение меньше значения текущего узла,
            // идем в левое поддерево
            if (targetValue < currentNode.val) {
                currentNode = currentNode.left;
            }
            // Если искомое значение больше значения текущего узла,
            // идем в правое поддерево
            else {
                currentNode = currentNode.right;
            }
        }

        // Возвращаем найденный узел или null, если узел не найден
        return currentNode;
    }
}
/*
Пример 1
Вход: root = [4,2,7,1,3], val = 2
Выход: [2,1,3]

Дерево:
     4
    / \
   2   7
  / \
 1   3

Нужно найти узел со значением 2 и вернуть его поддерево.


Пример 2
Вход: root = [4,2,7,1,3], val = 5
Выход: []

Дерево:
     4
    / \
   2   7
  / \
 1   3

Значение 5 не существует в дереве, поэтому возвращаем null.
 */