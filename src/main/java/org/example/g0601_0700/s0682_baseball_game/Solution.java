package org.example.g0601_0700.s0682_baseball_game;

// #Easy #Array #Stack #Simulation

import java.util.Stack;

/**
 * 682. Baseball Game
 *
 * Вам дается список строк ops, где каждая строка
 * представляет операцию в бейсбольной игре. Необходимо вычислить
 * сумму всех очков после выполнения всех операций.
 *
 * Правила операций:
 * "Integer" - целое число: добавляет это число к общей сумме
 * "+" - плюс: добавляет сумму двух предыдущих валидных очков
 * "D" - double: удваивает предыдущее валидное очко и добавляет к сумме
 * "C" - cancel: отменяет предыдущее валидное очко (удаляет его из суммы)
 * (примеры внизу)
 *
 * Решение - с использованием стека - 2-е решение - 2 ms
 *
 * Сложность:
 * Временная: O(n) - один проход по операциям
 * Пространственная: O(n) - для стека в худшем случае
 *
 */
class Solution {
    public int calPoints(String[] operations) {
        Stack<Integer> stack = new Stack<>();

        for (String op : operations) {
            switch (op) {
                case "+":
                    // Сумма двух предыдущих очков
                    int last = stack.pop();
                    int secondLast = stack.peek();
                    int sum = last + secondLast;
                    stack.push(last);
                    stack.push(sum);
                    break;
                case "D":
                    // Удвоение предыдущего очка
                    int lastScore = stack.peek();
                    stack.push(lastScore * 2);
                    break;
                case "C":
                    // Отмена предыдущего очка
                    stack.pop();
                    break;
                default:
                    // Целое число
                    stack.push(Integer.parseInt(op));
                    break;
            }
        }

        // Суммируем все оставшиеся очки в стеке
        int total = 0;
        while (!stack.isEmpty()) {
            total += stack.pop();
        }

        return total;
    }
}
/*
Пример 1
Вход: ops = ["5","2","C","D","+"]
Выход: 30
Объяснение:
"5" - добавляем 5, сумма = [5] = 5
"2" - добавляем 2, сумма = [5, 2] = 7
"C" - отменяем 2, сумма = [5] = 5
"D" - удваиваем 5, добавляем 10, сумма = [5, 10] = 15
"+" - складываем 5 + 10 = 15, добавляем 15, сумма = [5, 10, 15] = 30

Пример 2
Вход: ops = ["5","-2","4","C","D","9","+","+"]
Выход: 27

Объяснение:
"5" - [5] = 5
"-2" - [5, -2] = 3
"4" - [5, -2, 4] = 7
"C" - [5, -2] = 3
"D" - [5, -2, -4] = -1 (удваиваем -2)
"9" - [5, -2, -4, 9] = 8
"+" - [5, -2, -4, 9, 5] = 13 (складываем -4 + 9 = 5)
"+" - [5, -2, -4, 9, 5, 14] = 27 (складываем 9 + 5 = 14)

 */
