package org.example.g0701_0800.s0704_binary_search;

// #Easy #Array #Binary_Search #Recursion

/**
 * 704. Binary Search
 *
 * Дан массив целых чисел nums, отсортированный в порядке
 * неубывания (т.е. каждый следующий элемент больше
 * или равен предыдущему), и целевое значение target.
 * Необходимо написать функцию, которая ищет целевое значение в массиве.
 * Если целевое значение существует в массиве, вернуть его индекс.
 * В противном случае вернуть -1.
 *
 * Требования:
 * Алгоритм должен иметь сложность O(log n)
 * Массив гарантированно отсортирован
 * Все элементы массива уникальны
 *
 * Пример 1
 * Вход: nums = [-1,0,3,5,9,12], target = 9
 * Выход: 4
 * Объяснение: 9 существует в nums с индексом 4
 *
 * Пример 2
 * Вход: nums = [-1,0,3,5,9,12], target = 2
 * Выход: -1
 * Объяснение: 2 не существует в nums, поэтому возвращаем -1
 *
 * Оптимальное решение: Классический двоичный поиск
 */
class Solution {
    public int search(int[] nums, int target) {
        // Инициализируем левую и правую границы поиска
        int left = 0;
        int right = nums.length - 1;

        // Пока левая граница не превысит правую
        while (left <= right) {
            // Находим средний индекс, избегая переполнения
            int mid = left + (right - left) / 2;

            if (nums[mid] == target) {
                // Нашли целевой элемент, возвращаем его индекс
                return mid;
            } else if (nums[mid] < target) {
                // Если средний элемент меньше целевого,
                // ищем в правой половине массива
                left = mid + 1;
            } else {
                // Если средний элемент больше целевого,
                // ищем в левой половине массива
                right = mid - 1;
            }
        }

        // Элемент не найден
        return -1;
    }
}
