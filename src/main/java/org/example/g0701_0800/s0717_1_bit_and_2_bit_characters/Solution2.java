package org.example.g0701_0800.s0717_1_bit_and_2_bit_characters;

/**
 * Преимущества:
 * Более короткий код
 * Работает за O(n) в худшем случае
 * Интересный математический подход
 *
 * Объяснение логики:
 * Каждая 1 перед последним 0 должна быть частью 2-битного символа
 * Если количество подряд идущих 1 четное, все они образуют пары
 * (2-битные символы)
 * Если нечетное, одна 1 остается без пары
 * и "захватывает" последний 0
 */
class Solution2 {
    public boolean isOneBitCharacter(int[] bits) {
        int n = bits.length;
        int i = n - 2; // Начинаем с предпоследнего элемента

        // Подсчитываем количество подряд идущих 1 перед последним 0
        int countOnes = 0;
        while (i >= 0 && bits[i] == 1) {
            countOnes++;
            i--;
        }

        // Если количество подряд идущих 1 четное,
        // то последний символ - 1-битный
        // Если нечетное, то последний символ - часть 2-битного символа
        return countOnes % 2 == 0;
    }
}
