package org.example.g1201_1300.s1290_convert_binary_number_in_a_linked_list_to_integer;

// #Easy #Math #Linked_List #Bits #Интересно

import org.example.a_leetcode_classes.ListNode;

/**
 * 1290. Convert Binary Number in a Linked List to Integer
 *
 * Дан головной узел односвязного списка head.
 * Каждый узел списка содержит одно значение (0 или 1),
 * представляющее один бит двоичного числа.
 * Список хранит биты в порядке от старшего к младшему (MSB to LSB).
 *
 * Цель: Преобразовать двоичное число, представленное
 * связным списком, в его десятичный эквивалент и вернуть его.
 *
 * Ограничения:
 * Связный список гарантированно не пустой
 * Количество узлов не превышает 30
 * Каждое значение в узле равно 0 или 1
 * (примеры внизу)
 *
 * Решение - Однопроходный алгоритм с накоплением результата
 * Это самое быстрое решение - 0 ms
 *
 * Сложность:
 * Время: O(n), где n - количество узлов
 * Память: O(1)
 */
public class Solution {
    public int getDecimalValue(ListNode head) {
        int decimalValue = 0;
        ListNode current = head;

        // Проходим по всем узлам списка
        while (current != null) {
            // Сдвигаем текущее значение на 1 бит влево (умножаем на 2)
            decimalValue = decimalValue << 1;

            // Добавляем текущий бит с помощью OR
            decimalValue = decimalValue | current.val;

            // Переходим к следующему узлу
            current = current.next;
        }

        return decimalValue;
    }
}
/*
Пример 1
Вход: head = [1,0,1]
Выход: 5
Объяснение:
Двоичное число: 101
Десятичное: 1*2² + 0*2¹ + 1*2⁰ = 4 + 0 + 1 = 5

Пример 2
Вход: head = [1,0,0,1,0,0,1,1,1,0,0,0,0,0,0]
Выход: 18880
Объяснение:
Двоичное число: 100100111000000
Десятичное: 18880

 */