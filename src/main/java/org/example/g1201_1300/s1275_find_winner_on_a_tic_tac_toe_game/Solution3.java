package org.example.g1201_1300.s1275_find_winner_on_a_tic_tac_toe_game;

/**
 * Битовые маски
 * Основная идея: Использовать битовые маски для представления
 * ходов каждого игрока и проверки выигрышных комбинаций.
 *
 * Подход:
 * Представлять ходы каждого игрока как битовую маску
 * Заранее определить битовые маски выигрышных комбинаций
 * Проверять, содержит ли маска игрока какую-либо выигрышную комбинацию
 *
 * Сложность:
 * Время: O(n)
 * Память: O(1)
 */
public class Solution3 {
    public String tictactoe(int[][] moves) {
        // Выигрышные комбинации в битовом представлении
        int[] winPatterns = {
                0b111000000, // Первая строка
                0b000111000, // Вторая строка
                0b000000111, // Третья строка
                0b100100100, // Первый столбец
                0b010010010, // Второй столбец
                0b001001001, // Третий столбец
                0b100010001, // Главная диагональ
                0b001010100  // Побочная диагональ
        };

        int aMoves = 0; // Битовое представление ходов A
        int bMoves = 0; // Битовое представление ходов B

        for (int i = 0; i < moves.length; i++) {
            int row = moves[i][0];
            int col = moves[i][1];
            int position = 1 << (row * 3 + col); // Позиция в битовой маске

            if (i % 2 == 0) {
                aMoves |= position;
            } else {
                bMoves |= position;
            }
        }

        // Проверяем выигрышные комбинации
        for (int pattern : winPatterns) {
            if ((aMoves & pattern) == pattern) return "A";
            if ((bMoves & pattern) == pattern) return "B";
        }

        // Проверяем статус игры
        if (moves.length == 9) {
            return "Draw";
        } else {
            return "Pending";
        }
    }
}
