Объяснение подходов
Решение с одной очередью (самое эффективное)

Принцип работы:
Push: При добавлении элемента перемещаем все существующие элементы после нового элемента
Поддержание порядка: После каждого push операция гарантирует, что последний добавленный элемент находится в начале очереди
LIFO поведение: Таким образом достигается поведение стека (последний вошел - первый вышел)

Как работает push:
Исходная очередь: [1, 2, 3]
Push(4): очередь становится [1, 2, 3, 4]
После цикла: [4, 1, 2, 3] (последний добавленный теперь первый)

Решение с двумя очередями
Принцип работы:
Push: Используем временную очередь для перестановки элементов
Перемещение: При добавлении нового элемента, временно перемещаем
все элементы во вспомогательную очередь
Восстановление: Добавляем новый элемент и возвращаем все элементы обратно

Сравнение подходов:
Одна очередь: Более эффективна по памяти (не требует второй очереди)
Две очереди: Более понятная логика, но требует дополнительной памяти
Производительность: Оба подхода имеют O(n) сложность для push операций

Ключевые моменты:
Очереди в Java обычно реализуются через LinkedList (FIFO поведение)
Операция push является самой дорогой в обоих решениях
Операции pop, top и empty остаются эффективными O(1)

Преимущества решения с одной очередью:
Меньше используемой памяти (только одна очередь)
Более элегантная реализация
Та же временная сложность, что и у решения с двумя очередями