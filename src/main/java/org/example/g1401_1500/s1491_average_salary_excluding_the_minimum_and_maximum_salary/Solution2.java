package org.example.g1401_1500.s1491_average_salary_excluding_the_minimum_and_maximum_salary;

import java.util.Arrays;

/**
 * Альтернативное Решение с сортировкой
 *
 * Сложность:
 * Временная сложность: O(n log n). Сложность алгоритма сортировки
 * Arrays.sort() для примитивов в Java 8 составляет O(n log n),
 * что хуже, чем O(n) у первого решения.
 * Пространственная сложность: O(1) или O(n). В зависимости
 * от используемого алгоритма сортировки (для примитивов Java использует
 * модифицированную быструю сортировку Dual-Pivot Quicksort,
 * которая использует O(log n) stack space, что технически
 * тоже O(1) для ограничений задачи).
 * (проверить)
 */
class Solution2 {
    public double average(int[] salary) {
        // Сортируем исходный массив по возрастанию.
        // После сортировки salary[0] становится минимумом,
        // а salary[salary.length - 1] становится максимумом.
        Arrays.sort(salary);

        // Инициализируем переменную для суммы всех зарплат, кроме первой и последней.
        int sum = 0;

        // Цикл начинается со второго элемента (индекс 1) и
        // заканчивается предпоследним элементом (индекс salary.length - 2).
        for (int i = 1; i < salary.length - 1; i++) {
            sum += salary[i];
        }

        // Вычисляем среднее значение.
        // Количество элементов для усреднения: (salary.length - 2)
        return (double) sum / (salary.length - 2);
    }
}
