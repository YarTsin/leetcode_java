package org.example.g1301_1400.s1380_lucky_numbers_in_a_matrix;

// #Easy #Array #Matrix

import java.util.ArrayList;
import java.util.List;

/**
 * 1380. Lucky Numbers in a Matrix
 *
 * Дана матрица matrix размером m x n (m строк, n столбцов)
 * из различных чисел. Нужно найти все «счастливые числа» в этой матрице.
 *
 * «Счастливое число» определяется как число, которое является:
 * Минимальным элементом в своей строке.
 * Максимальным элементом в своем сттолбце.
 * Проще говоря: Нужно для каждого элемента матрицы проверить
 * два условия: он самый маленький в своей строке и одновременно
 * самый большой в своем столбце.
 * (примеры внизу)
 *
 * Решение - с предварительным вычислением минимумов и максимумов
 * 4-е решение по скорости
 *
 * Основная идея: Вместо того чтобы для каждого элемента матрицы
 * проверять всю строку и весь столбец (что привело
 * бы к сложности O(m * n * (m + n))), мы можем предварительно вычислить:
 * Массив minInRow, где minInRow[i] — минимальное значение в строке i.
 * Массив maxInCol, где maxInCol[j] — максимальное значение в столбце j.
 * После этого нам останется лишь один раз пройти по всем элементам
 * матрицы и для каждого элемента matrix[i][j] проверить два условия:
 * matrix[i][j] == minInRow[i]
 * matrix[i][j] == maxInCol[j]
 * Если оба условия истинны, то число matrix[i][j] является «счастливым».
 */
class Solution {
    public List<Integer> luckyNumbers(int[][] matrix) {
        // Создаем список для результата
        List<Integer> luckyNumbersList = new ArrayList<>();

        // Получаем размеры матрицы
        int rowCount = matrix.length;    // количество строк (m)
        int colCount = matrix[0].length; // количество столбцов (n)

        // Создаем массив для хранения минимумов в каждой строке.
        // Инициализируем его очень большими значениями.
        int[] minInRow = new int[rowCount];
        for (int i = 0; i < rowCount; i++) {
            minInRow[i] = Integer.MAX_VALUE; // Начальное значение для поиска минимума
        }

        // Создаем массив для хранения максимумов в каждом столбце.
        // Инициализируем его очень маленькими значениями.
        int[] maxInCol = new int[colCount];
        for (int j = 0; j < colCount; j++) {
            maxInCol[j] = Integer.MIN_VALUE; // Начальное значение для поиска максимума
        }

        // Первый проход по матрице: заполняем массивы minInRow и maxInCol.
        for (int i = 0; i < rowCount; i++) {
            for (int j = 0; j < colCount; j++) {
                int currentValue = matrix[i][j];
                // Обновляем минимум для текущей строки i
                if (currentValue < minInRow[i]) {
                    minInRow[i] = currentValue;
                }
                // Обновляем максимум для текущего столбца j
                if (currentValue > maxInCol[j]) {
                    maxInCol[j] = currentValue;
                }
            }
        }

        // Второй проход по матрице: ищем элементы, которые
        // одновременно равны минимуму в своей строке и максимуму в своем столбце.
        for (int i = 0; i < rowCount; i++) {
            for (int j = 0; j < colCount; j++) {
                int currentValue = matrix[i][j];
                if (currentValue == minInRow[i] && currentValue == maxInCol[j]) {
                    // Если условие выполняется, добавляем число в список результата
                    luckyNumbersList.add(currentValue);
                }
            }
        }

        // Возвращаем найденный список счастливых чисел
        return luckyNumbersList;
    }
}
/*
Пример 1
Ввод: matrix = [[3,7,8],[9,11,13],[15,16,17]]
Матрица:
[ 3,  7,  8]
[ 9, 11, 13]
[15, 16, 17]
Вывод: [15]
Объяснение:
Число 15 является:
Минимальным в своей строке (3-я строка [15, 16, 17] -> min=15).
Максимальным в своем столбце (1-й столбец [3, 9, 15] -> max=15).

Пример 2
Ввод: matrix = [[1,10,4,2],[9,3,8,7],[15,16,17,12]]
Матрица:
[ 1, 10,  4,  2]
[ 9,  3,  8,  7]
[15, 16, 17, 12]
Вывод: [12]
Объяснение:
Число 12 является:
Минимальным в своей строке (3-я строка [15, 16, 17, 12] -> min=12).
Максимальным в своем столбце (4-й столбец [2, 7, 12] -> max=12).

Пример 3
Ввод: matrix = [[7,8],[1,2]]
Матрица:
[7, 8]
[1, 2]
Вывод: [7]
Объяснение:
Число 7 является:
Минимальным в своей строке (1-я строка [7, 8] -> min=7).
Максимальным в своем столбце (1-й столбец [7, 1] -> max=7).
 */