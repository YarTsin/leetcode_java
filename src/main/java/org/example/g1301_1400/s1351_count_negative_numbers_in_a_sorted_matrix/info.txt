Объяснение подходов:
1. Оптимальное решение (обход с использованием свойств сортировки)
Сложность: O(m + n) по времени, O(1) по памяти
Основные шаги:
Начинаем с правого верхнего угла матрицы
Если текущий элемент отрицательный:
Все элементы ниже в этом столбце также отрицательные (благодаря сортировке столбцов)
Добавляем количество всех элементов в столбце ниже текущей позиции
Переходим на столбец левее
Если текущий элемент неотрицательный:
Переходим на строку ниже
Преимущества:
Максимально эффективное использование свойств сортировки
Линейная сложность относительно суммы размеров матрицы


2. Решение с бинарным поиском
Сложность: O(m log n) по времени, O(1) по памяти
Основные шаги:
Для каждой строки выполняем бинарный поиск
Находим индекс первого отрицательного элемента
Количество отрицательных в строке = общее количество столбцов - индекс первого отрицательного
Преимущества:
Хорошая производительность для высоких матриц
Простая реализация

3. Простое решение (линейный поиск)
Сложность: O(m × n) по времени, O(1) по памяти
Основные шаги:
Проходим по всем элементам матрицы
Считаем количество отрицательных чисел
Недостатки:
Не использует преимущества сортировки
Медленно для больших матриц