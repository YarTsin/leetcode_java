package org.example.g1301_1400.s1389_create_target_array_in_the_given_order;

// #Easy #Array #Simulation

import java.util.ArrayList;
import java.util.List;

/**
 * Даны два массива целых чисел: nums и index.
 * Ваша задача — создать целевой массив, следуя определенному правилу.
 *
 * Правило построения целевого массива:
 * Целевой массив изначально пуст.
 * Читаем элементы пар (nums[i], index[i]) слева направо.
 * На каждом шаге i:
 * - Значение nums[i] вставляется в целевом массиве на позицию index[i].
 * - Важный нюанс: Если в целевом массиве на позиции index[i]
 * уже существует элемент, то он и все последующие элементы сдвигаются
 * вправо, чтобы освободить место для нового элемента.
 *
 * Проще говоря: Мы постепенно строим массив, вставляя числа из nums
 * на указанные в index позиции. Если место уже занято, мы "раздвигаем"
 * массив, вставляя новый элемент в середину.
 * (примеры внизу)
 * todo запутанное условие
 *
 * Решение - Использование ArrayList - Самое быстрое - 0 ms
 */
class Solution {
    public int[] createTargetArray(int[] nums, int[] index) {
        // Создаем список (ArrayList) для динамического построения целевого массива.
        // ArrayList идеально подходит для частых вставок в середину.
        List<Integer> targetList = new ArrayList<>();

        // Проходим по всем элементам массивов nums и index.
        // Они имеют одинаковую длину.
        for (int i = 0; i < nums.length; i++) {
            int currentNumber = nums[i];
            int currentIndex = index[i];

            // Вставляем число currentNumber на позицию currentIndex в список.
            // ArrayList автоматически сдвигает все элементы, находящиеся на позициях
            // currentIndex и правее, на одну позицию вправо.
            targetList.add(currentIndex, currentNumber);
        }

        // Преобразуем ArrayList в массив int[] для возврата из метода.
        // Создаем массив нужной длины.
        int[] targetArray = new int[targetList.size()];
        // Последовательно копируем элементы из списка в массив.
        for (int i = 0; i < targetList.size(); i++) {
            targetArray[i] = targetList.get(i);
        }

        // Возвращаем полученный массив.
        return targetArray;
    }
}
/*
Пример 1
Ввод:
nums = [0,1,2,3,4]
index = [0,1,2,2,1]
Шаги построения:
Шаг	nums[i]	index[i]	Целевой массив	Пояснение
0	0	0	[0]	Вставляем 0 на позицию 0 (в начало пустого массива).
1	1	1	[0, 1]	Вставляем 1 на позицию 1 (в конец массива).
2	2	2	[0, 1, 2]	Вставляем 2 на позицию 2 (в конец массива).
3	3	2	[0, 1, 3, 2]	Вставляем 3 на позицию 2. Элементы, начиная с индекса 2, сдвигаются вправо.
4	4	1	[0, 4, 1, 3, 2]	Вставляем 4 на позицию 1. Элементы, начиная с индекса
Вывод: [0,4,1,3,2]

Пример 2:
Ввод:
nums = [1,2,3,4,0]
index = [0,1,2,3,0]
Шаги построения:
Шаг	nums[i]	index[i]	Целевой массив	Пояснение
0	1	0	[1]	Вставляем 1 на позицию 0.
1	2	1	[1, 2]	Вставляем 2 на позицию 1.
2	3	2	[1, 2, 3]	Вставляем 3 на позицию 2.
3	4	3	[1, 2, 3, 4]	Вставляем 4 на позицию 3.
4	0	0	[0, 1, 2, 3, 4]	Вставляем 0 на позицию 0. Все элементы сдвигаются вправо.
*/
