package org.example.g1301_1400.s1374_generate_a_string_with_characters_that_have_odd_counts;

import java.util.Arrays;

/**
 * Альтернативный подход с использованием массивов
 * Можно создать массив символов длиной n, заполнить его
 * одним символом, а затем, если нужно, изменить последний символ.
 * Это решение по своей сути идентично первому, но использует
 * другой механизм построения строки.
 *
 * Временная сложность: O(n). Метод Arrays.fill выполняется за O(n).
 * Пространственная сложность: O(n). Мы используем массив символов длиной n.
 */
class Solution2 {
    public String generateTheString(int n) {
        // Создаем массив символов длиной n
        char[] charArray = new char[n];

        // Заполняем весь массив символом 'a'
        // Например, для n=4: ['a', 'a', 'a', 'a']
        Arrays.fill(charArray, 'a');

        // Если n четное, нам нужно изменить один символ,
        // чтобы счетчик 'a' стал нечетным (n-1), а у нового символа был счетчик 1.
        if (n % 2 == 0) {
            // Меняем последний символ массива с 'a' на 'b'
            // Теперь массив: ['a', 'a', 'a', 'b']
            charArray[n - 1] = 'b';
        }
        // Если n нечетное, массив уже заполнен правильно: n раз 'a'

        // Создаем строку из массива символов и возвращаем ее
        return new String(charArray);
    }
}