Объяснение подходов:
1. Хэш-таблица (однопроходный, оптимальный)
Сложность: O(n) по времени, O(n) по памяти
Основные шаги:
Проходим по массиву и для каждого числа проверяем:
Есть ли уже удвоенное значение текущего числа в множестве?
Есть ли уже половинное значение (только для четных чисел)?
Добавляем текущее число в множество
Преимущества:
Один проход по массиву
Простая и эффективная реализация
Корректно обрабатывает все случаи


2. Два прохода с хэш-таблицей
Сложность: O(n) по времени, O(n) по памяти
Основные шаги:
Первый проход: создаем частотный словарь
Второй проход: для каждого числа проверяем условия
Особый случай для нуля: нужно минимум два нуля
Преимущества:
Более явная обработка edge cases
Легче понять логику

3. Сортировка + бинарный поиск
Сложность: O(n log n) по времени, O(1) по памяти (или O(log n) для сортировки)
Основные шаги:
Сортируем массив
Для каждого элемента ищем его удвоенное значение бинарным поиском
Убеждаемся, что индексы разные
Недостатки:
Медленнее для больших массивов
Сложнее реализация