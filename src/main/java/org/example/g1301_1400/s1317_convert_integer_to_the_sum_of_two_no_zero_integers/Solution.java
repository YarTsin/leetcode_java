package org.example.g1301_1400.s1317_convert_integer_to_the_sum_of_two_no_zero_integers;

// #Easy #Math #Int #Array

/**
 * 1317. Convert Integer to the Sum of Two No-Zero Integers
 *
 * Дано целое число n. Нужно найти два целых числа a и b,
 * которые удовлетворяют следующим условиям:
 * a + b = n
 * Ни a, ни b не содержат цифру 0 в своем десятичном представлении
 * Цель: Вернуть массив из двух чисел [a, b], где a <= b.
 * Если существует несколько решений, вернуть любое из них.
 * (примеры внизу)
 *
 * Решение - перебор с проверкой условия
 * Самое быстрое 0 ms
 */
class Solution {
    public int[] getNoZeroIntegers(int n) {
        // Перебираем возможные пары чисел
        for (int a = 1; a < n; a++) {
            int b = n - a;

            // Проверяем, что оба числа не содержат цифру 0
            if (!containsZero(a) && !containsZero(b)) {
                return new int[]{a, b};
            }
        }

        // Теоретически всегда должно быть решение, но на всякий случай
        return new int[]{1, n - 1};
    }

    // Вспомогательная функция для проверки наличия цифры 0 в числе
    private boolean containsZero(int num) {
        // Обрабатываем особый случай: если число уже 0
        if (num == 0) return true;

        // Проверяем каждую цифру числа
        while (num > 0) {
            int digit = num % 10; // Получаем последнюю цифру
            if (digit == 0) {
                return true; // Нашли цифру 0
            }
            num /= 10; // Убираем последнюю цифру
        }
        return false; // Цифра 0 не найдена
    }
}
/*
Пример 1
Вход: n = 2
Выход: [1, 1]
Объяснение: 1 + 1 = 2, и ни 1, ни 1 не содержат цифру 0

Пример 2
Вход: n = 11
Выход: [2, 9] или [3, 8] или [4, 7] и т.д.
Объяснение: 2 + 9 = 11, и ни 2, ни 9 не содержат цифру 0

Пример 3
Вход: n = 10000
Выход: [1, 9999] или [2, 9998] и т.д.
Объяснение: 1 + 9999 = 10000, и ни 1, ни 9999 не содержат цифру 0

Пример 4
Вход: n = 1010
Выход: [11, 999] (один из возможных вариантов)
 */