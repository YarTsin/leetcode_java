package org.example.g1301_1400.s1399_count_largest_group;

// #Easy #Hash_Table #Math


/**
 * 1399. Count Largest Group
 *
 * Дано целое положительное число n. Необходимо сгруппировать все целые числа
 * от 1 до n включительно по сумме их цифр.
 *
 * Каждой группе присваивается уникальный ключ — это сумма цифр чисел,
 * входящих в группу. Например, числа 13 и 31 имеют сумму цифр
 * 4 (1+3=4 и 3+1=4), поэтому они попадают в одну группу с ключом 4.
 *
 * Требуется:
 * Сгруппировать числа от 1 до n по сумме их цифр.
 * Найти размер самой большой группы (т.е. группу с максимальным
 * количеством элементов).
 * Вернуть количество групп, имеющих этот максимальный размер.
 * todo запутанное условие
 *
 * Проще говоря: Нужно:
 * Для каждого числа от 1 до n посчитать сумму его цифр.
 * Сосчитать, сколько чисел имеют каждую сумму цифр.
 * Найти максимальное количество чисел с одинаковой суммой цифр.
 * Посчитать, для скольких сумм цифр количество чисел равно этому максимуму.
 * (примеры внизу)
 *
 * Решение - использовать массив для подсчета
 * не быстрое решение - 4 ms
 *
 * Основная идея:
 * Создать массив groupSizes для хранения количества чисел в каждой группе.
 * Максимально возможная сумма цифр для числа n (например, для n = 1000
 * максимальная сумма цифр будет 9+9+9+9 = 36).
 * Для каждого числа от 1 до n:
 * Вычислить сумму его цифр
 * Увеличить счетчик соответствующей группы
 * Найти максимальное значение в массиве groupSizes
 * Подсчитать, сколько раз это максимальное значение встречается в массиве
 *
 *
 */
class Solution {
    public int countLargestGroup(int n) {
        // Максимально возможная сумма цифр для n <= 10000
        // 9999 -> 9+9+9+9 = 36, поэтому создаем массив размером 37
        int[] groupSizes = new int[37]; // индексы от 0 до 36

        // Проходим по всем числам от 1 до n
        for (int i = 1; i <= n; i++) {
            // Вычисляем сумму цифр текущего числа
            int digitSum = calculateDigitSum(i);
            // Увеличиваем счетчик для соответствующей группы
            groupSizes[digitSum]++;
        }

        // Находим максимальный размер группы
        int maxSize = 0;
        for (int size : groupSizes) {
            if (size > maxSize) {
                maxSize = size;
            }
        }

        // Считаем, сколько групп имеют максимальный размер
        int count = 0;
        for (int size : groupSizes) {
            if (size == maxSize) {
                count++;
            }
        }

        return count;
    }

    // Вспомогательный метод для вычисления суммы цифр числа
    private int calculateDigitSum(int number) {
        int sum = 0;
        while (number > 0) {
            sum += number % 10; // получаем последнюю цифру и добавляем к сумме
            number /= 10;       // удаляем последнюю цифру
        }
        return sum;
    }
}
/*
Пример 1
Ввод: n = 13
Числа от 1 до 13 и их суммы цифр:
Число: 1, Сумма цифр: 1
Число: 2, Сумма цифр: 2
Число: 3, Сумма цифр: 3
Число: 4, Сумма цифр: 4
Число: 5, Сумма цифр: 5
Число: 6, Сумма цифр: 6
Число: 7, Сумма цифр: 7
Число: 8, Сумма цифр: 8
Число: 9, Сумма цифр: 9
Число: 10, Сумма цифр: 1
Число: 11, Сумма цифр: 2
Число: 12, Сумма цифр: 3
Число: 13, Сумма цифр: 4

Группировка по суммам цифр:
Сумма 1: [1, 10] (2 числа)
Сумма 2: [2, 11] (2 числа)
Сумма 3: [3, 12] (2 числа)
Сумма 4: [4, 13] (2 числа)
Сумма 5: [5] (1 число)
Сумма 6: [6] (1 число)
Сумма 7: [7] (1 число)
Сумма 8: [8] (1 число)
Сумма 9: [9] (1 число)

Анализ:
Максимальный размер группы: 2
Количество групп с размером 2: 4 (суммы 1, 2, 3, 4)
Вывод: 4

===========

Пример 2
Ввод: n = 2
Числа от 1 до 2 и их суммы цифр:
Число: 1, Сумма цифр: 1
Число: 2, Сумма цифр: 2

Группировка по суммам цифр:
Сумма 1: [1] (1 число)
Сумма 2: [2] (1 число)
Анализ:

Максимальный размер группы: 1
Количество групп с размером 1: 2 (суммы 1 и 2)
Вывод: 2
 */
