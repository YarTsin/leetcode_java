package org.example.g1301_1400.s1370_increasing_decreasing_string;

// #Easy #String #Hash_Table #Counting #Points

/**
 * 1370. Increasing Decreasing String
 *
 * Дана строка s. Нужно переупорядочить символы строки по следующему алгоритму:
 * Выбрать наименьший символ из оставшихся и добавить его к результату
 * Выбрать следующий наименьший символ (больше или равен предыдущему) и добавить
 * Повторять шаг 2 пока возможно
 * Выбрать наибольший символ из оставшихся и добавить к результату
 * Выбрать следующий наибольший символ (меньше или равен предыдущему) и добавить
 * Повторять шаг 5 пока возможно
 * Повторять шаги 1-6 пока все символы не будут использованы
 * Цель: Вернуть переупорядоченную строку.
 * todo запутанное условие
 * (примеры внизу)
 *
 * Решение - Подсчет частот + два указателя
 * 2-е решение - 2 ms
 *
 * Подход: Подсчет частот + два указателя
 * Подсчитываем частоту каждого символа
 * Используем два указателя: от 'a' до 'z' и обратно
 * Поочередно добавляем символы в возрастающем и убывающем порядке
 *
 *
 */
class Solution {
    public String sortString(String s) {
        // Создаем массив для подсчета частот (26 букв английского алфавита)
        int[] freq = new int[26];

        // Подсчитываем частоту каждого символа
        for (char c : s.toCharArray()) {
            freq[c - 'a']++;
        }

        StringBuilder result = new StringBuilder();
        int totalChars = s.length();

        while (totalChars > 0) {
            // Проход слева направо (наименьшие символы)
            for (int i = 0; i < 26; i++) {
                if (freq[i] > 0) {
                    result.append((char) ('a' + i));
                    freq[i]--;
                    totalChars--;
                }
            }

            // Проход справа налево (наибольшие символы)
            for (int i = 25; i >= 0; i--) {
                if (freq[i] > 0) {
                    result.append((char) ('a' + i));
                    freq[i]--;
                    totalChars--;
                }
            }
        }

        return result.toString();
    }
}
/*
Пример 1
Вход: s = "aaaabbbbcccc"
Выход: "abccbaabccba"
Объяснение:
Шаг 1: "a" (наименьший)
Шаг 2: "b" (следующий наименьший)
Шаг 3: "c" (следующий наименьший)
Шаг 4: "c" (наибольший)
Шаг 5: "b" (следующий наибольший)
Шаг 6: "a" (следующий наибольший)
Повторяем...

Пример 2
Вход: s = "rat"
Выход: "art"
Объяснение:
Шаг 1: "a" (наименьший)
Шаг 2: "r" (следующий наименьший)
Шаг 3: "t" (наибольший)

Пример 3
Вход: s = "leetcode"
Выход: "cdelotee"
 */